<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sink 的笔记本</title>
  
  <subtitle>沉舟侧畔千帆过</subtitle>
  <link href="https://ldsink.com/atom.xml" rel="self"/>
  
  <link href="https://ldsink.com/"/>
  <updated>2022-11-30T12:55:36.030Z</updated>
  <id>https://ldsink.com/</id>
  
  <author>
    <name>Sink</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>🕯</title>
    <link href="https://ldsink.com/articles/zhangzhe/"/>
    <id>https://ldsink.com/articles/zhangzhe/</id>
    <published>2022-11-30T12:50:52.000Z</published>
    <updated>2022-11-30T12:55:36.030Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://a.adcdn.cn/images/20221130.webp" alt="赴戍登程口占示家人"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://a.adcdn.cn/images/20221130.webp&quot; alt=&quot;赴戍登程口占示家人&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>比 Nginx 更加有趣的 Caddy！</title>
    <link href="https://ldsink.com/articles/fantasy-caddy/"/>
    <id>https://ldsink.com/articles/fantasy-caddy/</id>
    <published>2022-10-06T09:16:52.000Z</published>
    <updated>2022-11-30T12:47:50.087Z</updated>
    
    <content type="html"><![CDATA[<p>最近把自己和公司的 Web 服务器都从 Nginx 切换成了 <a href="https://caddyserver.com/">Caddy</a>，主要原因是 HTTPS 证书申请太麻烦。之前的 Nginx 如果使用 <a href="https://letsencrypt.org/">Let’s Encrypt</a> 的证书，代理程序会自动修改网站的配置文件，不太方便通过 git 来管理这些配置。刚好更换 Caddy 一起解决了这些问题。几年前就看过 Caddy 的相关介绍，但是没有真正使用。现在最新的 Caddy 已经到 2.0 版本，这次实际使用体验下来，Caddy 吸引我的几个功能点如下：</p><ul><li>Caddyfile，比 JSON 和 Nginx 的默认配置方式有好玩</li><li>自动 HTTPS，默认 DV 证书，可以支持到通配符证书</li><li>Go 开发，写自己的模块比 Nginx 的 Lua 模块方便</li><li>不停机热更新</li></ul><h2 id="Caddyfile"><a href="#Caddyfile" class="headerlink" title="Caddyfile"></a>Caddyfile</h2><p><a href="https://caddyserver.com/docs/caddyfile/">Caddyfile</a> 是 Caddy 的配置文件，官方文档定义是<strong>人类方便使用</strong>的一种配置文件（这句话让我想到以前的 <a href="https://ldsink.com/articles/toml/">Toml</a> 😊），我赞同这个点。<a href="https://caddyserver.com/docs/caddyfile/">Caddyfile</a> 确实比 JSON 有意思多了！官方有个简单的对比表格 <a href="https://caddyserver.com/docs/getting-started#json-vs-caddyfile"><strong>JSON vs. Caddyfile</strong></a>，我复制到下面：</p><table><thead><tr><th>JSON</th><th>Caddyfile</th></tr></thead><tbody><tr><td>Easy to generate</td><td>Easy to craft by hand</td></tr><tr><td>Easily programmable</td><td>Awkward to automate</td></tr><tr><td>Extremely expressive</td><td>Moderately expressive</td></tr><tr><td>Full range of Caddy functionality</td><td>Most of Caddy functionality</td></tr><tr><td>Allows config traversal</td><td>Cannot traverse within Caddyfile</td></tr><tr><td>Partial config changes</td><td>Whole config changes only</td></tr><tr><td>Can be exported</td><td>Cannot be exported</td></tr><tr><td>Compatible with all API endpoints</td><td>Compatible with some API endpoints</td></tr><tr><td>Documentation generated automatically</td><td>Documentation is hand-written</td></tr><tr><td>Ubiquitous</td><td>Niche</td></tr><tr><td>More efficient</td><td>More computational</td></tr><tr><td>Kind of boring</td><td>Kind of fun</td></tr></tbody></table><p>自己配置过程中，主要按照官网的图例（如下）进行修改。各个部分参照着进行修改，可以很快地完成配置。</p><p><img src="https://a.adcdn.cn/images/Caddyfile-visual.png" alt="Caddyfile Visual"></p><p>不同于 Nginx 需要拆分很多个文件，使用 Caddy 将一个站点的全部配置放在一个 Caddyfile 内。得益于 Caddyfile 精简的结构和强大的表达能力，Caddyfile 可以由很少的内容表示复杂的配置！一个 PR 将成百上千行的 Nginx 配置替换成几十行 Caddyfile，感觉超级棒！</p><p>这个站点的配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ldsink.com &#123;</span><br><span class="line">        header Strict-Transport-Security max-age=31536000;</span><br><span class="line">        root * /var/www/blog</span><br><span class="line">        file_server</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">www.ldsink.com &#123;</span><br><span class="line">        redir https://ldsink.com&#123;uri&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://caddyserver.com/">Caddy</a> 也可以很方便的代理 WebSocket 的流量，在某些时候很有用，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@websockets &#123;</span><br><span class="line">        header Connection *Upgrade*</span><br><span class="line">        header Upgrade websocket</span><br><span class="line">&#125;</span><br><span class="line">reverse_proxy @websockets localhost:1024</span><br></pre></td></tr></table></figure><p>可能因为 Caddy 是使用 Go 开发，Caddyfile 保留了一些 Go 的特点，他的缩进使用 Tab，不是我们常用 Python 的 4 个空格。修改完配置文件以后，可以使用 Caddy 自带的 fmt 命令加上 <code>--overwrite</code> 格式化并覆盖配置文件（写这个文章前几天还是 <code>-overwrite</code>，然后更新了，此时就是 <code>--</code> 了）。进入配置文件所在目录，执行如下命令：</p><blockquote><p>caddy fmt –overwrite</p></blockquote><h2 id="自动-HTTPS，支持通配符证书"><a href="#自动-HTTPS，支持通配符证书" class="headerlink" title="自动 HTTPS，支持通配符证书"></a>自动 HTTPS，支持通配符证书</h2><p>Caddy 的一大特点就是自动 HTTPS，默认的配置都是 HTTPS 的，只需要使用 80 和 443 端口就可以自动在 <a href="https://letsencrypt.org/">Let’s Encrypt</a> 或者 <a href="https://zerossl.com/">ZeroSSL</a> 签发证书并正确配置。Caddy 除了自动搞定开始的签发和配置，还可以在证书过期前自动进行续签。对于我们这种小站而言，只要 DNS 设置正确，就再也不用担心各种证书问题，Caddy 都能帮忙自动搞定。</p><p>Caddy 还支持修改 ACME 设置更改 SSL 证书的提供商，不过这个属于高级用法，我没用过，有需要的可以自己翻文档。这里介绍一下怎么通过插件把 Caddy 和 DNSPod 结合，自动签发通配符证书。</p><p>首先需要安装一个第三方模块，让 Caddy 可以调用 DNSPod 的接口。</p><blockquote><p>caddy add-package github.com&#x2F;caddy-dns&#x2F;dnspod</p></blockquote><p>然后需要去 DNSPod 申请一个 Token 供 Caddy 使用，链接如下：</p><p><a href="https://console.dnspod.cn/account/token/token">https://console.dnspod.cn/account/token/token</a></p><p>申请好 Token 后，需要添加到 Caddyfile 内。可以结合模块的介绍，填入对应的配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 这里我做成了一个 snippet，方便重复使用</span><br><span class="line">(dnspod) &#123;</span><br><span class="line">        tls &#123;</span><br><span class="line">                dns dnspod &lt;DNSPOD_TOKEN_ID&gt;,&lt;DNSPOD_TOKEN&gt;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*.ldsink.com &#123;</span><br><span class="line">        import dnspod</span><br><span class="line">        # 以下是正常的内容</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后重新加载配置，自动的通配符证书应该就生效了。</p><blockquote><p>caddy reload</p></blockquote><p>这里特别夸一下，Caddy 支持不停机热更新。如果新的配置文件有错误，Caddy 会自动回滚到上一个有效的配置，保证服务持续可用。</p><h2 id="目前的问题"><a href="#目前的问题" class="headerlink" title="目前的问题"></a>目前的问题</h2><p>前面夸了很多，Caddy 确实很好，但也不是十全十美，他也有一些小问题，这里也说明一下。使用过程中注意和规避掉这些缺点，Caddy 就可以在生产环境中替换 Nginx 使用。</p><p>首先明确一点，Caddy 本体就是个独立的可执行二进制文件。想要集成任何模块，做的事情其实是 Caddy 加上模块的源代码一起重新编译出一个新的二进制文件。这种方式让 Caddy 变得简单和轻量，某种意义上也带来了一些麻烦。</p><p>我最开始使用 Ubuntu 的包管理方式安装 Caddy，这种方式有个严重的问题：<strong>之后所有的更新（<code>apt update &amp;&amp; apt upgrade -y</code>），只会更新成不带第三方插件版本的最新的 Caddy</strong>。我们使用 <code>caddy add-package</code> 命令安装的任何第三方扩展，更新后都会丢失，例如上面的 DNSPod 模块。</p><blockquote><p>Tips: 查看安装的模块可以使用命令 <code>caddy list-modules</code></p></blockquote><p>想要在更新成携带第三方模块版本的 Caddy，需要使用自带的升级命令：</p><blockquote><p>caddy upgrade</p></blockquote><p><strong>我现在的做法是，通过 apt 安装完 Caddy 后，马上去 <code>/etc/apt/sources.list.d</code> 内删除源。只通过 apt 安装，后续的更新都走自带的升级命令。</strong>这样做，可以保持第三方模块存在。</p><p>不过这样做也有一个坑，需要注意：caddy 自带的更新，会将现在的可执行文件直接备份，然后下载新的文件到对面的目录。<strong>如果这个时候网络中断导致更新没有完成，那么 caddy 文件会损坏，需要手动把备份文件恢复。</strong>否则如果此时遇到 caddy 进程重启，新的 caddy 将无法启动。</p><p>更新时候的日志信息如下，遇到问题恢复也简单，把 <code>.tmp</code> 后缀的备份文件重新恢复成原始文件就好。</p><blockquote><p>mv &#x2F;usr&#x2F;bin&#x2F;caddy.tmp &#x2F;usr&#x2F;bin&#x2F;caddy</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;current_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/caddy&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;backup_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/caddy.tmp&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近把自己和公司的 Web 服务器都从 Nginx 切换成了 &lt;a href=&quot;https://caddyserver.com/&quot;&gt;Caddy&lt;/a&gt;，主要原因是 HTTPS 证书申请太麻烦。之前的 Nginx 如果使用 &lt;a href=&quot;https://letsencry</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MaxCompute 简单调研</title>
    <link href="https://ldsink.com/articles/maxcompute/"/>
    <id>https://ldsink.com/articles/maxcompute/</id>
    <published>2022-05-29T06:18:25.000Z</published>
    <updated>2022-05-29T06:20:35.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://help.aliyun.com/document_detail/27800.html">文档</a> | <a href="https://workbench.data.aliyun.com/console#/MCEngines">控制台</a></p><ul><li>产品定位定位：云数据仓库</li><li>支持内部表和外部表（MaxCompute 2.0版本开始支持外部表）</li><li>产品上，和阿里云内部的 DataWorks 和 Quick BI 打通</li><li>数据上，可以通过数据集成功能加载不同数据源（例如 MySQL）的数据，也可以通过数据集成把 MaxCompute 的数据导出到各种业务数据库。</li></ul><p><img src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4646012261/p277090.png" alt="MaxCompute产品架构"></p><h3 id="MaxCompute的项目发挥什么作用？"><a href="#MaxCompute的项目发挥什么作用？" class="headerlink" title="MaxCompute的项目发挥什么作用？"></a>MaxCompute的项目发挥什么作用？</h3><ul><li>项目（Project）是MaxCompute的基本组织单元，类似于传统数据库的Database或Schema的概念，是进行多用户隔离和访问控制的主要边界。</li><li>项目中包含多个对象，例如表（Table）、资源（Resource）、函数（Function）和实例（Instance）等。</li><li>一个用户可以同时拥有多个项目的权限。</li><li>通过安全授权，可以在一个项目访问另一个项目中的对象。</li></ul><h3 id="MaxCompute常见错误信息如何理解，怎么定位问题？"><a href="#MaxCompute常见错误信息如何理解，怎么定位问题？" class="headerlink" title="MaxCompute常见错误信息如何理解，怎么定位问题？"></a>MaxCompute常见错误信息如何理解，怎么定位问题？</h3><p>MaxCompute的常见报错信息编号有规范定义，格式为：<code>异常编号：通用描述 - 上下文相关说明</code>。其中SQL、MapReduce、Tunnel的错误信息是不一样的。更多错误信息，请参见<a href="https://help.aliyun.com/document_detail/34636.htm?spm=a2c4g.11186623.0.0.5a6d7e6ddQj4YT#concept-orf-tcw-tdb">错误码概述</a>。</p><h3 id="核心概念的层次结构"><a href="#核心概念的层次结构" class="headerlink" title="核心概念的层次结构"></a>核心概念的层次结构</h3><p><img src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/8564001361/p324382.png" alt="MaxCompute核心概念的层次结构"></p><h3 id="关键性里程碑"><a href="#关键性里程碑" class="headerlink" title="关键性里程碑"></a>关键性里程碑</h3><p><img src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4633419161/p1001.png" alt="MaxCompute关键性里程碑"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h3><ol><li><a href="https://help.aliyun.com/document_detail/185240.html">浏览器，MaxCompute 控制台-查询编辑器</a></li><li><a href="https://help.aliyun.com/document_detail/27971.html">PC，MaxCompute客户端（odpscmd）</a></li><li><a href="https://help.aliyun.com/document_detail/50889.html">集成开发环境工具，用于 IntelliJ IDEA</a></li></ol><h3 id="生态对接"><a href="#生态对接" class="headerlink" title="生态对接"></a>生态对接</h3><p><strong>基本都是 Java 生态，提供 Connector，使用 JDBC 连接。Python 提供了 <a href="https://help.aliyun.com/document_detail/155553.html">SDK</a>，需要开发。</strong></p><blockquote><p>连接页面，是否需要根据不同的数据源的形式，实现不同的标签说明？</p></blockquote><p><img src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/4515317361/p301250.png" alt="MaxCompute的生态架构"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><a href="https://help.aliyun.com/document_detail/114422.html">产品：构建与优化数据仓库</a></li><li><a href="https://help.aliyun.com/document_detail/27859.html">开发：SQL及函数</a></li><li><a href="https://help.aliyun.com/document_detail/104045.html">安全：权限管理</a></li><li><a href="https://help.aliyun.com/document_detail/117432.html">规范：数据模型架构规范</a></li><li><a href="https://help.aliyun.com/document_detail/66048.html">演示：公开数据集</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://help.aliyun.com/document_detail/27800.html&quot;&gt;文档&lt;/a&gt; | </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>奈飞文化手册</title>
    <link href="https://ldsink.com/books/powerful-building-a-culture-of-freedom-and-responsibility/"/>
    <id>https://ldsink.com/books/powerful-building-a-culture-of-freedom-and-responsibility/</id>
    <published>2022-05-17T05:30:58.000Z</published>
    <updated>2022-05-24T09:14:37.995Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>尽信书，不如无书。 —— 孟子</p></blockquote><blockquote><p>一个人的命运啊，当然要靠自我奋斗，但是也要考虑到历史的行程。 —— 长者</p></blockquote><p>批判的看管理学&#x2F;成功学书籍，思考内容里面举例和结果之间的因果关系是否成立。找到真正的关键因素。</p><p><img src="https://a.adcdn.cn/images/mindmaster-netflix.png" alt="Netflix MindMaster"></p><h2 id="几次成功的转型"><a href="#几次成功的转型" class="headerlink" title="几次成功的转型"></a>几次成功的转型</h2><h3 id="2006-2007"><a href="#2006-2007" class="headerlink" title="2006-2007"></a>2006-2007</h3><p>结果：实现从邮政递送DVD到网络流媒体播放的转型；</p><p>历史行程：</p><ul><li>互联网条件成熟，带宽提高，Youtube崛起</li></ul><p>自我奋斗：</p><ul><li>算法推荐！</li></ul><h3 id="2011Q3"><a href="#2011Q3" class="headerlink" title="2011Q3"></a>2011Q3</h3><p>结果：从网络播放旧内容到通过外部制片公司创作新内容，如《纸牌屋》；</p><p>历史行程：</p><ul><li>第一个在流媒体播放的主流电视剧《纸牌屋》<ul><li>演员 + 导演Kevin Spacey （Margin Call）</li><li>播放方式</li></ul></li></ul><p>自我奋斗：</p><ul><li>数据分析！！</li></ul><p><strong>核心护城河：为用户提供优质内容。</strong></p><p>小Lin姐的 <a href="https://www.bilibili.com/video/BV1KL4y1W7EV/">【硬核商业分析】Netflix《鱿鱼游戏》背后最大赢家，网飞的崛起之路</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;尽信书，不如无书。 —— 孟子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;一个人的命运啊，当然要靠自我奋斗，但是也要考虑到历史的行程。 —— 长者&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;批判的看管理学&amp;#x2F;成功学</summary>
      
    
    
    
    <category term="books" scheme="https://ldsink.com/categories/books/"/>
    
    
  </entry>
  
  <entry>
    <title>从收藏夹观察网址变化趋势</title>
    <link href="https://ldsink.com/articles/observe-the-trend-of-urls-from-bookmarks/"/>
    <id>https://ldsink.com/articles/observe-the-trend-of-urls-from-bookmarks/</id>
    <published>2022-04-30T04:30:46.000Z</published>
    <updated>2022-05-29T06:23:31.830Z</updated>
    
    <content type="html"><![CDATA[<p>五一前夕，我花了点时间使用扩展 <a href="https://addons.mozilla.org/zh-CN/firefox/addon/bookmarks-organizer/">Bookmarks Organizer</a> 整理了十年间在浏览器内积累的近千个书签。根据网址的变化，记录一些个人对趋势的观察。</p><h2 id="HTTPS-全面普及"><a href="#HTTPS-全面普及" class="headerlink" title="HTTPS 全面普及"></a>HTTPS 全面普及</h2><p>最为明显的特征是 HTTPS 全面普及，几乎没有 HTTP 的网页。收藏夹一些政府部门，甚至包括银行官网（非个人网银页面），传统意义上比较顽固的页面都进行了更新，部署了 HTTPS。</p><h2 id="网址更短，更精简"><a href="#网址更短，更精简" class="headerlink" title="网址更短，更精简"></a>网址更短，更精简</h2><p>这块主要是四个变化方向：</p><ol><li>域名精简。现在有了更多的顶级域名，很多网站不再拘泥传统的 com 域名。可以会变成更短更合适的其他顶级域名（持有成本甚至可能更低）。技术类网站，io、ai、dev、pro 等都是非常好的选择，例如 <code>celeryproject.org</code> &#x3D;&gt; <code>celeryq.dev</code> 、<code>tylermcginnis.com</code> &#x3D;&gt; <code>ui.dev</code></li><li>移除 www 前缀。比如本站和 <code>Github.com</code>。这个有很多例子，就不举例了</li><li>和 2 有关，移除 www 后，一些功能会独立成二级域名，从而缩短网址长度。例如 <code>www.domain.com/(blog/bbs/doc)</code> 直接更换成二级域名的方式 <code>(blog/bbs/doc).domain.com</code></li><li>uri 精简。早期很多文章域名采用 WordPress 带日期的方式。<code>/articles/2022/04/30/three-passions</code> 会直接变成 <code>/three-passions</code></li></ol><h2 id="cn-域名增多"><a href="#cn-域名增多" class="headerlink" title="cn 域名增多"></a>cn 域名增多</h2><p>一部分国内网站，曾经的顶级域名优先使用 .com，现在切换成了 .cn。这部分也分为两类：</p><ol><li>就是喜欢 .cn 的，其他主域名都跳转 .cn。比如 <code>moegirl.org</code> &#x3D;&gt; <code>moegirl.org.cn</code></li><li>走出去，国际化。.com 作为国际化首页，.cn 服务本土。比如 <a href="https://www.infoq.cn/">InfoQ</a></li></ol><h2 id="政府站点质量上升"><a href="#政府站点质量上升" class="headerlink" title="政府站点质量上升"></a>政府站点质量上升</h2><p>以前政府网站质量一言难尽，现在感觉重视起来了。域名，内容和网站本身安全性等各个方面都有了很多提升。现在厅级以下应该不让独立建站，挂靠上级网站下对应的模块。以前长沙市长沙县泉塘街道的 <code>url.gov.cn</code> 这样有意思的域名以后应该难再见到了。</p><p>法院、工商、财政相关的信息获取难度比以前大大降低，而且看得出有些部门审美是在线的。</p><p>全国社会组织查询</p><ul><li>旧：<a href="https://www.chinanpo.gov.cn/search/orgcx.html">https://www.chinanpo.gov.cn/search/orgcx.html</a></li><li>新：<a href="https://chinanpo.mca.gov.cn/">https://chinanpo.mca.gov.cn/</a></li></ul><p>储蓄国债发行</p><ul><li>旧：2021年数据已经停止更新，就不放出来了</li><li>新：<a href="http://gks.mof.gov.cn/ztztz/guozaiguanli/gzfxdzs/">http://gks.mof.gov.cn/ztztz/guozaiguanli/gzfxdzs/</a></li></ul><h2 id="个人站点大量消失"><a href="#个人站点大量消失" class="headerlink" title="个人站点大量消失"></a>个人站点大量消失</h2><p>社会环境和商业模式变化，很多个人站点因为各种原因都消失了。</p><h2 id="产品发展进化"><a href="#产品发展进化" class="headerlink" title="产品发展进化"></a>产品发展进化</h2><p>很多好的产品随着时代落幕，也有更多好的产品变得更加成熟。一些产品或者服务被收购，网址更新成集团网址。这里提两个和我的主业没关系的网站，以前偏社区，现在正式商业化运作，希望他们未来更加美好。</p><ul><li>Tushare：<a href="http://www.tushare.org/">www.tushare.org</a> &#x3D;&gt; <a href="https://tushare.pro/">tushare.pro</a></li><li>vn.py：<a href="https://www.vnpy.com/">vnpy.com</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;五一前夕，我花了点时间使用扩展 &lt;a href=&quot;https://addons.mozilla.org/zh-CN/firefox/addon/bookmarks-organizer/&quot;&gt;Bookmarks Organizer&lt;/a&gt; 整理了十年间在浏览器内积累的近千个书签</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>友善度-知乎</title>
    <link href="https://ldsink.com/articles/fuck-zhihu/"/>
    <id>https://ldsink.com/articles/fuck-zhihu/</id>
    <published>2022-02-12T03:06:06.000Z</published>
    <updated>2022-05-29T06:23:31.790Z</updated>
    
    <content type="html"><![CDATA[<p>知乎老用户，这些年来，见证各种骚操作。好端端的知识分享网站沦落成一个无良XX。</p><p>产品设计上：</p><ul><li>有教用户做人的无法按照用户关注来的Feed流</li><li>有时不时插入回答的小广告</li><li>有知音读者故事会风格的盐选小故事</li><li>有强制开屏小广告（切换APP都会强制弹出）</li><li>有一不小心就会滑到就自动下载并播放的低俗视频</li><li>有刻意设计让你容易误触的向下和点赞按钮</li><li>有不知道什么时候强制关注的一堆问题</li><li>有无法隐藏的个人动态</li></ul><p>除开产品，还有不知道 G 点在哪里的小管家。</p><p>稍微一盘点，老实说，如此不把用户当人看的产品，我还在使用，真佩服自己的忍耐力。可能知乎在早期确实给我留下了太好的印象，当时从上面很多专业大佬会分享知识，学习到了很多。但是现在，只能呵呵。</p><p>因为是老用户，还是和一些朋友互相关注，直接注销账号感觉有些可惜。账号留着，但是估计不会再使用，找了一些方法，尽可能的减少感到恶心的地方。</p><h3 id="关闭最近浏览"><a href="#关闭最近浏览" class="headerlink" title="关闭最近浏览"></a>关闭最近浏览</h3><p>进入 APP，<code>我的</code> -&gt; <code>最近浏览</code>，点击右上角三个点图标的设置，可以 <code>关闭最近浏览</code>。</p><h3 id="批量取消关注的问题"><a href="#批量取消关注的问题" class="headerlink" title="批量取消关注的问题"></a>批量取消关注的问题</h3><p>不知道是哪个版本引入的功能，可能有点赞或者评论就会自动关注问题，再配合 APP 刻意设计的误触式点赞，我发现自己多了千余个关注的问题。再次 bibibi……</p><p>参考知乎上<a href="https://www.zhihu.com/people/shi-xiao-jie-23">小荷才</a>在问题<a href="https://www.zhihu.com/question/27922502/answer/964383258">如何批量取消关注的问题？</a>的回答，可以使用如下方式：</p><ol><li>打开<strong>旧版</strong>我关注的问提的页面 <a href="https://www.zhihu.com/question/following">https://www.zhihu.com/question/following</a></li><li><code>F12</code> 打开浏览器控制台，切换到<code>控制台</code>部分</li><li>粘贴如下的代码并回车执行，会自动往下翻页并取消关注</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unfollow_all</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> remaining = $(<span class="string">&quot;.zg-unfollow&quot;</span>).<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (remaining &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        $(<span class="string">&quot;.zg-unfollow&quot;</span>).<span class="title function_">first</span>().<span class="title function_">trigger</span>(<span class="string">&#x27;click&#x27;</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(unfollow_all, <span class="number">1000</span>);</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollHeight</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">unfollow_all</span>();</span><br></pre></td></tr></table></figure><h3 id="批量取消个人中心的点赞"><a href="#批量取消个人中心的点赞" class="headerlink" title="批量取消个人中心的点赞"></a>批量取消个人中心的点赞</h3><p>个人中心的点赞也无法隐藏。我不想去深究这么设计的原因是为了追求更多的用户数据，还是知乎产品经理的大脑发育有部分缺陷。批量取消关注的问题提供了一个思路，自己动手写了个JS函数，模拟点击取消投票。</p><p>步骤如下：</p><ol><li>打开<code>我的主页</code> <a href="https://www.zhihu.com/people/%E7%94%A8%E6%88%B7ID/">https://www.zhihu.com/people/用户ID/</a></li><li><code>F12</code> 打开浏览器控制台，切换到<code>控制台</code>部分</li><li>粘贴如下的代码并回车执行，会自动往下翻页并取消点赞。取消一定数量之后，会触发知乎的拦截，那就休息一下，过一阵再来，总能取消干净。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> neutralCount = <span class="number">0</span> </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">neutral</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> button = $(<span class="string">&quot;button.VoteButton.is-active&quot;</span>) <span class="comment">// 定位到一个已投票按钮</span></span><br><span class="line">    <span class="keyword">if</span> (!button) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollHeight</span>) <span class="comment">// 下划到底部，触发新数据的加载</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        button.<span class="title function_">click</span>() <span class="comment">// 触发点击，取消投票</span></span><br><span class="line">        neutralCount++ <span class="comment">// 计数器加 1</span></span><br><span class="line">        <span class="keyword">if</span> (neutralCount % <span class="number">10</span> == <span class="number">0</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`已取消 <span class="subst">$&#123;neutralCount&#125;</span> 次投票`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">setTimeout</span>(neutral, <span class="number">1000</span>) <span class="comment">// 休息一下，找下一个目标，继续取消</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">neutral</span>()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;知乎老用户，这些年来，见证各种骚操作。好端端的知识分享网站沦落成一个无良XX。&lt;/p&gt;
&lt;p&gt;产品设计上：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有教用户做人的无法按照用户关注来的Feed流&lt;/li&gt;
&lt;li&gt;有时不时插入回答的小广告&lt;/li&gt;
&lt;li&gt;有知音读者故事会风格的盐选小故事</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2022 新年快乐！</title>
    <link href="https://ldsink.com/articles/2022-happy-new-year/"/>
    <id>https://ldsink.com/articles/2022-happy-new-year/</id>
    <published>2022-02-01T08:29:55.000Z</published>
    <updated>2022-05-29T06:23:32.002Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://a.adcdn.cn/images/2022-InfoQ.png" alt="2022-InfoQ"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://a.adcdn.cn/images/2022-InfoQ.png&quot; alt=&quot;2022-InfoQ&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>效率工具推荐</title>
    <link href="https://ldsink.com/articles/recommended-efficiency-tools/"/>
    <id>https://ldsink.com/articles/recommended-efficiency-tools/</id>
    <published>2021-10-31T04:23:19.000Z</published>
    <updated>2022-05-29T06:23:31.930Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选取标准"><a href="#选取标准" class="headerlink" title="选取标准"></a>选取标准</h2><ul><li>“工欲善其事必先利其器”，确实能实际的提高效率。</li><li>跨平台支持，可以在 Linux、Windows 和 macOS 上使用（排名有先后）。</li><li>属于 活跃开源项目 或者 有商业公司支持。不推荐已经无人维护的软件。</li></ul><h2 id="工具目录"><a href="#工具目录" class="headerlink" title="工具目录"></a>工具目录</h2><h3 id="uTools"><a href="#uTools" class="headerlink" title="uTools"></a>uTools</h3><p>新一代效率工具平台， <a href="https://u.tools/">https://u.tools/</a>。</p><p>核心功能：</p><ol><li>快速启动</li><li>文件搜索（配合 Everything）</li><li>第三方插件</li></ol><h3 id="Zeal"><a href="#Zeal" class="headerlink" title="Zeal"></a>Zeal</h3><p>离线文档浏览，<a href="https://zealdocs.org/">https://zealdocs.org/</a>。</p><h3 id="坚果云"><a href="#坚果云" class="headerlink" title="坚果云"></a>坚果云</h3><p>国内最好的同步盘，<a href="https://www.jianguoyun.com/">https://www.jianguoyun.com/</a>。</p><p>同步盘和网盘的区别：</p><ul><li>同步盘：本机的一个文件夹和远端服务器的一个文件夹绑定，任意一端的变动双向同步。</li><li>网盘：远端服务器多了一块空间很大的文件夹，对这个文件夹操作只影响这个文件夹。</li></ul><h3 id="KeePassXC"><a href="#KeePassXC" class="headerlink" title="KeePassXC"></a>KeePassXC</h3><p>密码管理工具，<a href="https://keepassxc.org/">https://keepassxc.org/</a>。</p><p>一开始 KeePass，再 KeePassX，最终 KeePassXC。</p><h3 id="WPS-Office"><a href="#WPS-Office" class="headerlink" title="WPS Office"></a>WPS Office</h3><p>一站式办公服务平台，<a href="https://www.wps.cn/">https://www.wps.cn/</a>。</p><p>优点：</p><ul><li>政企用户基本使用 WPS</li><li>很好的支持 Linux</li><li>很好的支持 Android</li><li>很好的支持 macOS</li><li>自带海量模板库，支持海报等功能契合国内公众号生态</li><li>整合一堆第三方功能，付费之后功能完善 &amp; 性价比很高</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="向日葵-amp-花生壳"><a href="#向日葵-amp-花生壳" class="headerlink" title="向日葵 &amp; 花生壳"></a>向日葵 &amp; 花生壳</h4><p>向日葵：远程控制软件，<a href="https://sunlogin.oray.com/">https://sunlogin.oray.com/</a>。</p><p>花生壳：内网穿透软件，<a href="https://hsk.oray.com/">https://hsk.oray.com/</a>。</p><h4 id="XMind-x2F-MindMaster-x2F-EdrawMax"><a href="#XMind-x2F-MindMaster-x2F-EdrawMax" class="headerlink" title="XMind &#x2F; MindMaster &#x2F; EdrawMax"></a>XMind &#x2F; MindMaster &#x2F; EdrawMax</h4><p>脑图、流程图类工具</p><h4 id="Cryptomator"><a href="#Cryptomator" class="headerlink" title="Cryptomator"></a>Cryptomator</h4><p>开源免费的云同步网盘加密工具，<a href="https://cryptomator.org/">https://cryptomator.org/</a>。</p><h4 id="Firefox-Browser"><a href="#Firefox-Browser" class="headerlink" title="Firefox Browser"></a>Firefox Browser</h4><p><strong>务必使用国际版</strong></p><p><a href="https://www.mozilla.org/zh-CN/firefox/browsers/">https://www.mozilla.org/zh-CN/firefox/browsers/</a></p><h4 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h4><p>Free. Built on open source. Runs everywhere.</p><p>使用历史：<code>Notepad++</code> -&gt; <code>Sublime Text</code> -&gt; <code>Atom</code> -&gt; <code>Visual Studio Code</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;选取标准&quot;&gt;&lt;a href=&quot;#选取标准&quot; class=&quot;headerlink&quot; title=&quot;选取标准&quot;&gt;&lt;/a&gt;选取标准&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;“工欲善其事必先利其器”，确实能实际的提高效率。&lt;/li&gt;
&lt;li&gt;跨平台支持，可以在 Linux、Window</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>庆祝中国共产党成立100周年</title>
    <link href="https://ldsink.com/articles/cpc-100th-anniversary/"/>
    <id>https://ldsink.com/articles/cpc-100th-anniversary/</id>
    <published>2021-07-01T15:45:01.000Z</published>
    <updated>2022-05-29T06:23:31.810Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://a.adcdn.cn/images/cpc-100th-anniversary.webp" alt="image"></p><p><strong>胸怀千秋伟业，恰是百年风华。</strong></p><p><strong>伟大、光荣、正确的中国共产党万岁！</strong></p><p><strong>伟大、光荣、英雄的中国人民万岁！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://a.adcdn.cn/images/cpc-100th-anniversary.webp&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;胸怀千秋伟业，恰是百年风华。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;伟大、光荣、</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux 启动后自动执行命令</title>
    <link href="https://ldsink.com/articles/how-to-run-a-shell-script-at-startup/"/>
    <id>https://ldsink.com/articles/how-to-run-a-shell-script-at-startup/</id>
    <published>2021-06-27T07:40:45.000Z</published>
    <updated>2022-05-29T06:23:31.738Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 环境下，一般需要自启动执行任务，需要修改 <code>/etc/init.d</code> 或者 <code>/etc/rc.d/</code>。 这里介绍一个简单方式，通过 <code>crontab</code> 来实现这个目的。</p><p>执行</p><blockquote><p>crontab -e</p></blockquote><p>增加如下内容，其中 <code>/path/to/your/script.sh</code> 替换成需要执行的命令或者脚本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@reboot  /path/to/your/script.sh</span><br></pre></td></tr></table></figure><p><code>crontab</code> 一般用于定时执行任务，但是它还提供了 <code>@reboot</code> 用于启动之后执行。 推荐一个非常好用的网站 <a href="https://crontab.guru/">crontab.guru</a> ，可以用来检测命令，预测下一次任务的启动时间。</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li><a href="https://stackoverflow.com/questions/12973777/how-to-run-a-shell-script-at-startup">How to run a shell script at startup</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Linux 环境下，一般需要自启动执行任务，需要修改 &lt;code&gt;/etc/init.d&lt;/code&gt; 或者 &lt;code&gt;/etc/rc.d/&lt;/code&gt;。 这里介绍一个简单方式，通过 &lt;code&gt;crontab&lt;/code&gt; 来实现这个目的。&lt;/p&gt;
&lt;p&gt;执行&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="how-to" scheme="https://ldsink.com/tags/how-to/"/>
    
    <category term="linux" scheme="https://ldsink.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>设置执行 sudo 免密码</title>
    <link href="https://ldsink.com/articles/how-to-execute-sudo-without-password/"/>
    <id>https://ldsink.com/articles/how-to-execute-sudo-without-password/</id>
    <published>2021-06-27T07:00:45.000Z</published>
    <updated>2022-05-29T06:23:31.610Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 中，一些操作需要使用 <code>sudo</code> 命令进行提权到 <code>root</code> 后才可以顺利执行。默认这一步操作是需要输入密码的，可以通过设置免除密码。</p><h1 id="获取用户名"><a href="#获取用户名" class="headerlink" title="获取用户名"></a>获取用户名</h1><p>执行如下命令，获得当前用户的用户名。</p><blockquote><p>echo $USER</p></blockquote><h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><p>配置文件位于 <code>/etc/sudoers</code>，但是注意，<strong>千万不要直接修改这个文件！</strong> 我见过太多直接修改这个文件造成系统无法启动的例子了。 正确的方式是使用 <code>visudo</code> 命令修改。执行</p><blockquote><p>sudo visudo</p></blockquote><p>按下 <code>Shift+g</code> 切换到文件尾部，按下 <code>o</code> 新增一行， 将下面这一行添加到文件尾部（<code>$USER</code> 替换成之前获取到的用户名）。 <code>Shift+z+z</code> 保存并退出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">USER ALL=(ALL) NOPASSWD: ALL</span></span><br></pre></td></tr></table></figure><p>注销或者重启之后，再次使用 <code>sudo</code> 命令就不需要输入密码了。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><code>sudo</code> 本身是个危险操作，执行之后会使用最高的 <code>root</code> 权限执行命令。很多发行版第一次执行都会给出提示，比如 <code>deepin</code> 会有如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">我们信任您已经从系统管理员那里了解了日常注意事项。</span><br><span class="line">总结起来无外乎这三点：</span><br><span class="line"></span><br><span class="line">    #1) 尊重别人的隐私。</span><br><span class="line">    #2) 输入前要先考虑(后果和风险)。</span><br><span class="line">    #3) 权力越大，责任越大。</span><br></pre></td></tr></table></figure><p>同时用户目录会生成 <code>.sudo_as_admin_successful</code> 文件，表示已经给出过提示。</p><p>我非常喜欢这三点提示。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ul><li><a href="https://askubuntu.com/questions/147241/execute-sudo-without-password">Execute sudo without Password?</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Linux 中，一些操作需要使用 &lt;code&gt;sudo&lt;/code&gt; 命令进行提权到 &lt;code&gt;root&lt;/code&gt; 后才可以顺利执行。默认这一步操作是需要输入密码的，可以通过设置免除密码。&lt;/p&gt;
&lt;h1 id=&quot;获取用户名&quot;&gt;&lt;a href=&quot;#获取用户名&quot; cla</summary>
      
    
    
    
    
    <category term="how-to" scheme="https://ldsink.com/tags/how-to/"/>
    
    <category term="linux" scheme="https://ldsink.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Firefox 首次支持 Linux 上的硬件加速功能</title>
    <link href="https://ldsink.com/articles/firefox-were-finally-getting-hw-acceleration-on-linux/"/>
    <id>https://ldsink.com/articles/firefox-were-finally-getting-hw-acceleration-on-linux/</id>
    <published>2021-01-12T03:20:14.000Z</published>
    <updated>2021-06-22T05:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://a.adcdn.cn/images/firefox-quantum-engine.webp" alt="firefox-quantum-engine"></p><p>看到一则令人开心的消息<a href="https://mastransky.wordpress.com/2021/01/10/firefox-were-finally-getting-hw-acceleration-on-linux/">Firefox – we’re finally getting HW acceleration on Linux</a>。目前 Firefox 在 Linux 下并不支持硬件加速，导致其在B站播放视频非常容易卡顿。我目前安装了一个 Chrome 专门用于看B站视频。期待 Firefox 早日实现全部功能，在 Linux 下也拥有流畅的效果。</p><p>可以在 <code>about:support</code> 内查看目前使用的图像合成引擎，我这里 Firefox Developer Edition 85.0b7 还是 <code>OpenGL</code>，希望早日用上 <code>WebRender</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://a.adcdn.cn/images/firefox-quantum-engine.webp&quot; alt=&quot;firefox-quantum-engine&quot;&gt;&lt;/p&gt;
&lt;p&gt;看到一则令人开心的消息&lt;a href=&quot;https://mastran</summary>
      
    
    
    
    
    <category term="firefox" scheme="https://ldsink.com/tags/firefox/"/>
    
  </entry>
  
  <entry>
    <title>密钥文件取舍</title>
    <link href="https://ldsink.com/articles/organize-key-files/"/>
    <id>https://ldsink.com/articles/organize-key-files/</id>
    <published>2020-09-11T04:30:46.000Z</published>
    <updated>2022-05-29T06:23:31.770Z</updated>
    
    <content type="html"><![CDATA[<h3 id="密钥的取舍"><a href="#密钥的取舍" class="headerlink" title="密钥的取舍"></a>密钥的取舍</h3><p>系统里面，积累起来的 SSH 密钥已经包含了 <code>rsa</code>、<code>dsa</code>、<code>ecdsa</code> 和 <code>ed25519</code> 四对。基于 <strong>“同类型的保留一种，安全性高优先”</strong> 的原则进行清理。已知：</p><ul><li><code>rsa</code> 和 <code>dsa</code> 基于大数因数分解。</li><li><code>ecdsa</code> 和 <code>ed25519</code> 基于椭圆曲线离散对数问题。</li><li><code>rsa</code> 长度 4096 位之后目前可以视为安全。</li><li><code>dsa</code> 已被认为不安全。</li><li><code>ecdsa</code> 政治上：算法选择由 <a href="https://www.nist.gov/">NIST</a> 设定；技术上：过于复杂以至于无法完善的检查。因此也视为不安全。</li><li><code>ed25519</code> 安全性最高，性能最好。<a href="https://www.openssh.com/txt/release-6.5">但是需要比较新的版本（OpenSSH 6.5+）才支持</a>。</li></ul><p>最后保留4096位的<code>rsa</code>密钥和<code>ed25519</code>密钥。在允许的情况下优先使用<code>ed25519</code>密钥。</p><h3 id="“秘”和“密”的区别"><a href="#“秘”和“密”的区别" class="headerlink" title="“秘”和“密”的区别"></a>“秘”和“密”的区别</h3><p>这是一个题外话。前几天同事注释把密钥写成了秘钥，我发现了这个错别字。改正之后，我们对这个字的含义产生了兴趣。因为“秘密”这个词表示隐秘，两个单字应该都有近似的含义，那为什么是“密钥”而不是“秘钥”。“秘”和“密”的区别是什么？</p><p>一番查证，归纳出了如下区别：</p><table><thead><tr><th>秘</th><th>密</th></tr></thead><tbody><tr><td>客观，被动</td><td>主观，主动</td></tr><tr><td>内容本身隐蔽，强调的是不易知</td><td>需要去隐蔽内容，强调的是不让知</td></tr><tr><td>神鬼之事、高深莫测、罕闻稀见</td><td>人为之事、故意遮掩、严加控制</td></tr><tr><td>例词：秘本、秘方、秘史、秘闻、秘笈</td><td>例词：密封、密谈、密约、保密、泄密、解密、绝密、机密</td></tr></tbody></table><p>汉语博大精深。</p><h3 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h3><ul><li><a href="https://medium.com/@honglong/%E9%81%B8%E6%93%87-ssh-key-%E7%9A%84%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95-70ca45c94d8e">選擇 SSH key 的加密演算法</a></li><li><a href="https://sohfrance.com/%E7%A7%98%E3%80%81%E5%AF%86%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%AB%EF%BC%9F/">秘、密如何区别</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;密钥的取舍&quot;&gt;&lt;a href=&quot;#密钥的取舍&quot; class=&quot;headerlink&quot; title=&quot;密钥的取舍&quot;&gt;&lt;/a&gt;密钥的取舍&lt;/h3&gt;&lt;p&gt;系统里面，积累起来的 SSH 密钥已经包含了 &lt;code&gt;rsa&lt;/code&gt;、&lt;code&gt;dsa&lt;/code&gt;、&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>UOS（deepin）20 桌面版体验</title>
    <link href="https://ldsink.com/articles/uos-20/"/>
    <id>https://ldsink.com/articles/uos-20/</id>
    <published>2020-07-14T04:17:26.000Z</published>
    <updated>2022-05-29T06:23:31.654Z</updated>
    
    <content type="html"><![CDATA[<p>本来刚出就打算升级的，各种原因耽误了，最近终于动手升级了系统版本。下文为纯主观体验。</p><h2 id="系统变化"><a href="#系统变化" class="headerlink" title="系统变化"></a>系统变化</h2><ul><li>界面比 15 版本好看很多，整个系统风格统一成圆角风格。</li><li>默认壁纸多了一些漂亮的风景画。</li><li>UOS 20 个人版作为商业版本需要激活，并且需要登录账号进入开发者模式才能打开 root 权限。deepin 20 作为社区版本无此限制。</li><li>底层基于 debian 10.3，内核 5.3。安装第三方应用可以依次找对应的包。lsb_release 无法获取版本号，实际应该是 debian buster。</li><li>默认是个简单的套壳浏览器。按需换成 Firefox 或者 Chrome（期待巨硬未来的 Edge）。</li><li>应用商店软件版本比 15 新很多。deepin 人手也不多，目前看起来只能尽力维护 20 版本的，体谅。</li><li>因为有私有软件，更新源变成两个。系统一个，独立的应用商店一个。从这里可以得到 UOS20 的 codename 应该是 plum，应用商店是 eagle。</li></ul><h2 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h2><p>默认的终端变回了 bash，并且用的是 debian 默认的 gnome 终端，可以在应用商店安装老版本的 deepin-terminal。</p><h3 id="当前用户-sudo-免密码-Ref"><a href="#当前用户-sudo-免密码-Ref" class="headerlink" title="当前用户 sudo 免密码 Ref"></a>当前用户 sudo 免密码 <a href="https://askubuntu.com/questions/147241/execute-sudo-without-password">Ref</a></h3><blockquote><p>sudo visudo<br>$USER ALL&#x3D;(ALL) NOPASSWD: ALL</p></blockquote><p><code>$USER</code>替换成当前用户名</p><h3 id="默认编辑器使用-vim"><a href="#默认编辑器使用-vim" class="headerlink" title="默认编辑器使用 vim"></a>默认编辑器使用 vim</h3><blockquote><p>sudo update-alternatives –config editor</p></blockquote><h3 id="切换-zsh"><a href="#切换-zsh" class="headerlink" title="切换 zsh"></a>切换 zsh</h3><p>参考<a href="https://ldsink.com/articles/install-zsh-on-ubuntu/">Ubuntu 上安装 zsh</a></p><h2 id="权限和配置"><a href="#权限和配置" class="headerlink" title="权限和配置"></a>权限和配置</h2><p>一些配置文件从旧系统复制到新系统，包括</p><ul><li>.ssh</li><li>.gnupg</li><li>.profile</li><li>.zshrc</li><li>.vscode</li><li>.pip</li><li>.docker</li><li>.npm</li><li>.fonts</li><li>.gitconfig</li><li>.git-credentials</li><li>.gitignore</li><li>Jetbrains 全家桶各个配置</li></ul><h2 id="软件应用"><a href="#软件应用" class="headerlink" title="软件应用"></a>软件应用</h2><h3 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h3><ul><li>默认输入法不再是搜狗，搜狗官网的包有问题，需要命令行安装。<code>sudo apt install sogoupinyin -y</code></li><li>可以在应用商店内安装迅飞输入法。</li><li>百度输入法目前的体验很糟糕，正常用还需要等等。</li></ul><h3 id="安全中心"><a href="#安全中心" class="headerlink" title="安全中心"></a>安全中心</h3><p>这个东西看用途是一个可视化的防火墙，为普通用户提供网络管理功能。<br>但是，对于开发者来说，这东西极其糟糕，建议卸载。主要问题是<strong>这东西会限制一些服务的端口监听</strong>，调试需要使用的一些代理都会被限制。</p><p>命令行卸载：</p><blockquote><p>sudo apt remove -y deepin-defender</p></blockquote><p>删除配置文件：</p><blockquote><p>rm ~&#x2F;.deepin-defender</p></blockquote><p>重启之后恢复正常</p><h3 id="坚果云"><a href="#坚果云" class="headerlink" title="坚果云"></a>坚果云</h3><p>目前应用商店没有上架，我使用源代码方式编译安装。安装完成之后还需要多装一个 Notify，之后重启电脑，可以正常使用。</p><blockquote><p>sudo apt install gir1.2-notify-0.7</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本来刚出就打算升级的，各种原因耽误了，最近终于动手升级了系统版本。下文为纯主观体验。&lt;/p&gt;
&lt;h2 id=&quot;系统变化&quot;&gt;&lt;a href=&quot;#系统变化&quot; class=&quot;headerlink&quot; title=&quot;系统变化&quot;&gt;&lt;/a&gt;系统变化&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;界面比 15</summary>
      
    
    
    
    
    <category term="deepin" scheme="https://ldsink.com/tags/deepin/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 调整笔记</title>
    <link href="https://ldsink.com/articles/tuning-nginx/"/>
    <id>https://ldsink.com/articles/tuning-nginx/</id>
    <published>2020-04-10T08:27:49.000Z</published>
    <updated>2022-05-29T06:23:31.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="调整-Linux-配置"><a href="#调整-Linux-配置" class="headerlink" title="调整 Linux 配置"></a>调整 Linux 配置</h1><h2 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h2><h3 id="系统层面"><a href="#系统层面" class="headerlink" title="系统层面"></a>系统层面</h3><p>编辑 <code>/etc/sysctl.conf</code> 文件，调整 <code>fs.file-max</code> 参数值。</p><blockquote><p>fs.file-max &#x3D; 200000</p></blockquote><p>验证方式：</p><blockquote><p>cat &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;file-max</p></blockquote><h3 id="用户层面"><a href="#用户层面" class="headerlink" title="用户层面"></a>用户层面</h3><p>编辑 <code>/etc/security/limits.conf</code>，增加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*  soft nproc  65535</span><br><span class="line">*  hard nproc  65535</span><br><span class="line">*  soft nofile 65535</span><br><span class="line">*  hard nofile 65535</span><br></pre></td></tr></table></figure><p>验证方式：</p><blockquote><p>ulimit -n</p></blockquote><h2 id="临时端口"><a href="#临时端口" class="headerlink" title="临时端口"></a>临时端口</h2><p>编辑 <code>/etc/sysctl.conf</code> 文件，调整 <code>net.ipv4.ip_local_port_range</code> 参数值。</p><blockquote><p>net.ipv4.ip_local_port_range &#x3D; 1024 65000</p></blockquote><p>验证方式：</p><blockquote><p>cat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_local_port_range</p></blockquote><h1 id="调整-Nginx-配置"><a href="#调整-Nginx-配置" class="headerlink" title="调整 Nginx 配置"></a>调整 Nginx 配置</h1><h2 id="Worker-Processes"><a href="#Worker-Processes" class="headerlink" title="Worker Processes"></a>Worker Processes</h2><ul><li><a href="https://nginx.org/en/docs/ngx_core_module.html#worker_processes">worker_processes</a> - 和CPU核心数一致，建议直接使用<code>auto</code>。</li><li><a href="https://nginx.org/en/docs/ngx_core_module.html#worker_connections">worker_connections</a> - <code>worker_processes</code>*<code>worker_connections</code> 即为总并发数，根据实际情况调整。</li><li><a href="https://nginx.org/en/docs/ngx_core_module.html#worker_rlimit_nofile">worker_rlimit_nofile</a> - worker 进程打开的最大文件数，可设置为用户的文件打开限制 <code>ulimit -n</code>。</li></ul><h2 id="保持连接"><a href="#保持连接" class="headerlink" title="保持连接"></a>保持连接</h2><p>相关介绍： <a href="https://www.nginx.com/blog/http-keepalives-and-web-performance/">HTTP Keepalive Connections and Web Performance</a></p><ul><li><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_requests">keepalive_requests</a> - 建议根据实际情况调高</li><li><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_timeout">keepalive_timeout</a> – 空闲连接关闭时间</li></ul><h2 id="访问日志"><a href="#访问日志" class="headerlink" title="访问日志"></a>访问日志</h2><p>记录日志会消耗 CPU 和 I&#x2F;O 资源。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="隐藏-Nginx-具体版本"><a href="#隐藏-Nginx-具体版本" class="headerlink" title="隐藏 Nginx 具体版本"></a>隐藏 Nginx 具体版本</h3><blockquote><p>server_tokens off;</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.nginx.com/blog/tuning-nginx/">Tuning NGINX for Performance</a></li><li><a href="https://www.nginx.com/blog/http-keepalives-and-web-performance/">HTTP Keepalive Connections and Web Performance</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;调整-Linux-配置&quot;&gt;&lt;a href=&quot;#调整-Linux-配置&quot; class=&quot;headerlink&quot; title=&quot;调整 Linux 配置&quot;&gt;&lt;/a&gt;调整 Linux 配置&lt;/h1&gt;&lt;h2 id=&quot;文件描述符&quot;&gt;&lt;a href=&quot;#文件描述符&quot; class</summary>
      
    
    
    
    
    <category term="nginx" scheme="https://ldsink.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>toolbox 的一些更新</title>
    <link href="https://ldsink.com/articles/toolbox-updates-2020-02/"/>
    <id>https://ldsink.com/articles/toolbox-updates-2020-02/</id>
    <published>2020-02-10T07:21:49.000Z</published>
    <updated>2022-05-29T06:23:32.062Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/ldsink/toolbox/">toolbox</a> 是自己整理的一些脚本库，将平时用的多的常用操作固定成脚本，可追踪可维护，减少重复劳动。主要有脚本、Shell命令和<code>docker-compose</code>配置三块。</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><ul><li>增加了 <a href="https://raw.githubusercontent.com/ldsink/toolbox/master/install-python.sh">install-python.sh</a> 脚本，方便编译安装对应的 Python 版本</li><li>统一了脚本文件名，依照动词+用途命名，例如 <code>install-XXX</code>、<code>set-XXX</code></li><li><code>Shebang</code> 均使用 <code>#!/usr/bin/env bash</code> <a href="https://en.wikipedia.org/w/index.php?title=Shebang_(Unix)#Portability">提高兼容性</a></li><li>更新、删除了一些失效脚本</li></ul><h3 id="docker-compose配置"><a href="#docker-compose配置" class="headerlink" title="docker-compose配置"></a><code>docker-compose</code>配置</h3><p>简单更新了一下镜像版本。</p><p>其他的遇到了一个有意思的问题，如何在 Jenkins 的容器内继续使用 Docker。参考 <a href="https://forums.docker.com/t/using-docker-in-a-dockerized-jenkins-container/322">Using docker in a dockerized Jenkins container</a> 更新编排文件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/ldsink/toolbox/&quot;&gt;toolbox&lt;/a&gt; 是自己整理的一些脚本库，将平时用的多的常用操作固定成脚本，可追踪可维护，减少重复劳动。主要有脚本、Shell命令和&lt;code&gt;docker-compose&lt;/c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2020 新年快乐！</title>
    <link href="https://ldsink.com/articles/2020-happy-new-year/"/>
    <id>https://ldsink.com/articles/2020-happy-new-year/</id>
    <published>2020-01-01T06:00:18.000Z</published>
    <updated>2022-05-29T06:23:31.990Z</updated>
    
    <content type="html"><![CDATA[<p>21世纪的第三个十年，加油！</p><p><img src="https://a.adcdn.cn/images/2020-dream.webp" alt="2020-dream"></p><p><img src="https://a.adcdn.cn/images/python2.7-countdown.webp" alt="python2.7-countdown"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;21世纪的第三个十年，加油！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://a.adcdn.cn/images/2020-dream.webp&quot; alt=&quot;2020-dream&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://a.adcdn.cn/images/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux QQ 全新回归</title>
    <link href="https://ldsink.com/articles/linux-qq-come-back/"/>
    <id>https://ldsink.com/articles/linux-qq-come-back/</id>
    <published>2019-10-25T05:17:47.000Z</published>
    <updated>2022-05-29T06:23:31.574Z</updated>
    
    <content type="html"><![CDATA[<p>看到一则新闻，Linux QQ全新回归，号称“从心出发·趣无止境”。官网：<a href="https://im.qq.com/linuxqq/">https://im.qq.com/linuxqq/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Linux QQ 2.0.0 Beta（New）2019/10/24</span><br><span class="line">    - Linux QQ全新回归</span><br><span class="line">    - 支持x64、ARM64、MIPS64三种架构</span><br><span class="line">    - 优化消息体验，完善消息收发能力</span><br><span class="line">    - 性能优化</span><br></pre></td></tr></table></figure><p>高中竞赛的时候 QQ 有 Linux 版本，可惜后面不维护，再后面就没了。现在重新发布，第一时间下载体验。很遗憾，这个复古的界面效果，和十年前的界面没太多的区别。deepin 深色主题下，聊天框背景还都是黑的，很难看清聊天窗口。</p><p>麻利的卸载，继续打开了 Tim，感谢 deepin 商店配置的 wine Tim。希望腾讯继续努力，以后 Linux 原生版本的体验能达到正常水平。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;看到一则新闻，Linux QQ全新回归，号称“从心出发·趣无止境”。官网：&lt;a href=&quot;https://im.qq.com/linuxqq/&quot;&gt;https://im.qq.com/linuxqq/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight pla</summary>
      
    
    
    
    
    <category term="linux" scheme="https://ldsink.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Python 编码风格指南</title>
    <link href="https://ldsink.com/articles/python-style-guide/"/>
    <id>https://ldsink.com/articles/python-style-guide/</id>
    <published>2019-10-23T08:36:09.000Z</published>
    <updated>2022-05-29T06:23:31.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总则"><a href="#总则" class="headerlink" title="总则"></a>总则</h1><p>除非项目有自己的约定，默认应该遵循 <a href="https://www.python.org/dev/peps/pep-0008/">PEP8</a> 和 <a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/contents/">Google Python 风格指南</a> 的要求。在开始编写代码前，请阅读并了解这两个文档。</p><h1 id="项目约定"><a href="#项目约定" class="headerlink" title="项目约定"></a>项目约定</h1><h2 id="代码布局"><a href="#代码布局" class="headerlink" title="代码布局"></a>代码布局</h2><h3 id="风格"><a href="#风格" class="headerlink" title="风格"></a>风格</h3><ul><li><code>list</code>，<code>tuple</code>，<code>dict</code> 多行定义的时候，每行结尾增加<code>,</code>，用于减少 <code>git diff</code> 时候的变动。</li></ul><h3 id="行长度"><a href="#行长度" class="headerlink" title="行长度"></a>行长度</h3><p>最大行长度180，推荐不超过120。</p><p>推荐在 PyCharm 内设置 <a href="https://www.jetbrains.com/help/pycharm/code-style-python.html#wrapping_and_braces">Wrapping and braces</a>，<code>Visual guides</code>设置为 <code>120, 180</code>。</p><h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><p><strong>使用 <code>format</code> 函数进行格式化</strong>，不使用 <code>%</code> 的方式。</p><h3 id="导入格式"><a href="#导入格式" class="headerlink" title="导入格式"></a>导入格式</h3><p>导入超过一行的情况下，使用括号包住引入模块。左括号后直接换行，右括号前不加内容。如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> package_name <span class="keyword">import</span> (</span><br><span class="line">    module_1, module_2, module_3, module_4, module_5</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="嵌套函数（Nested-function）"><a href="#嵌套函数（Nested-function）" class="headerlink" title="嵌套函数（Nested function）"></a>嵌套函数（Nested function）</h3><ul><li>嵌套函数声明在使用的代码之前的地方</li><li>嵌套函数必须以<code>_</code>前缀开头</li></ul><h3 id="函数命名"><a href="#函数命名" class="headerlink" title="函数命名"></a>函数命名</h3><ul><li>判断检查类型逻辑的函数以 <code>is_</code> 或 <code>has_</code> 前缀开头，返回值应该是 <code>bool</code> 类型</li><li>验证校验类型逻辑的函数以 <code>check_</code> 或 <code>validate_</code> 前缀开头，返回值可以包括相关的对象</li><li>进行操作的函数应该以动词开头，如 <code>set_</code>、<code>get_</code>、<code>process_</code>、<code>enable_</code>、<code>disable_</code> 等</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;总则&quot;&gt;&lt;a href=&quot;#总则&quot; class=&quot;headerlink&quot; title=&quot;总则&quot;&gt;&lt;/a&gt;总则&lt;/h1&gt;&lt;p&gt;除非项目有自己的约定，默认应该遵循 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/&quot;&gt;</summary>
      
    
    
    
    
    <category term="python" scheme="https://ldsink.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Happy 15th Birthday, Ubuntu!</title>
    <link href="https://ldsink.com/articles/happy-15th-birthday-ubuntu/"/>
    <id>https://ldsink.com/articles/happy-15th-birthday-ubuntu/</id>
    <published>2019-10-23T05:47:26.000Z</published>
    <updated>2022-05-29T06:23:31.862Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://a.adcdn.cn/images/happy-15th-birthday-ubuntu.webp" alt="happy-15th-birthday-ubuntu"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://a.adcdn.cn/images/happy-15th-birthday-ubuntu.webp&quot; alt=&quot;happy-15th-birthday-ubuntu&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="ubuntu" scheme="https://ldsink.com/tags/ubuntu/"/>
    
  </entry>
  
</feed>
