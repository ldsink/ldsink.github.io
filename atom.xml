<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sink 的笔记本</title>
  
  <subtitle>沉舟侧畔千帆过</subtitle>
  <link href="https://ldsink.com/atom.xml" rel="self"/>
  
  <link href="https://ldsink.com/"/>
  <updated>2022-02-01T08:31:06.809Z</updated>
  <id>https://ldsink.com/</id>
  
  <author>
    <name>Sink</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2022 新年快乐！</title>
    <link href="https://ldsink.com/articles/2022-happy-new-year/"/>
    <id>https://ldsink.com/articles/2022-happy-new-year/</id>
    <published>2022-02-01T08:29:55.000Z</published>
    <updated>2022-02-01T08:31:06.809Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://a.adcdn.cn/images/2022-InfoQ.png" alt="2022-InfoQ"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://a.adcdn.cn/images/2022-InfoQ.png&quot; alt=&quot;2022-InfoQ&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="articles" scheme="https://ldsink.com/categories/articles/"/>
    
    
  </entry>
  
  <entry>
    <title>效率工具推荐</title>
    <link href="https://ldsink.com/articles/recommended-efficiency-tools/"/>
    <id>https://ldsink.com/articles/recommended-efficiency-tools/</id>
    <published>2021-10-31T04:23:19.000Z</published>
    <updated>2021-11-24T10:04:19.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选取标准"><a href="#选取标准" class="headerlink" title="选取标准"></a>选取标准</h2><ul><li>“工欲善其事必先利其器”，确实能实际的提高效率。</li><li>跨平台支持，可以在 Linux、Windows 和 macOS 上使用（排名有先后）。</li><li>属于 活跃开源项目 或者 有商业公司支持。不推荐已经无人维护的软件。</li></ul><h2 id="工具目录"><a href="#工具目录" class="headerlink" title="工具目录"></a>工具目录</h2><h3 id="uTools"><a href="#uTools" class="headerlink" title="uTools"></a>uTools</h3><p>新一代效率工具平台， <a href="https://u.tools/">https://u.tools/</a>。</p><p>核心功能：</p><ol><li>快速启动</li><li>文件搜索（配合 Everything）</li><li>第三方插件</li></ol><h3 id="Zeal"><a href="#Zeal" class="headerlink" title="Zeal"></a>Zeal</h3><p>离线文档浏览，<a href="https://zealdocs.org/">https://zealdocs.org/</a>。</p><h3 id="坚果云"><a href="#坚果云" class="headerlink" title="坚果云"></a>坚果云</h3><p>国内最好的同步盘，<a href="https://www.jianguoyun.com/">https://www.jianguoyun.com/</a>。</p><p>同步盘和网盘的区别：</p><ul><li>同步盘：本机的一个文件夹和远端服务器的一个文件夹绑定，任意一端的变动双向同步。</li><li>网盘：远端服务器多了一块空间很大的文件夹，对这个文件夹操作只影响这个文件夹。</li></ul><h3 id="KeePassXC"><a href="#KeePassXC" class="headerlink" title="KeePassXC"></a>KeePassXC</h3><p>密码管理工具，<a href="https://keepassxc.org/">https://keepassxc.org/</a>。</p><p>一开始 KeePass，再 KeePassX，最终 KeePassXC。</p><h3 id="WPS-Office"><a href="#WPS-Office" class="headerlink" title="WPS Office"></a>WPS Office</h3><p>一站式办公服务平台，<a href="https://www.wps.cn/">https://www.wps.cn/</a>。</p><p>优点：</p><ul><li>政企用户基本使用 WPS</li><li>很好的支持 Linux</li><li>很好的支持 Android</li><li>很好的支持 macOS</li><li>自带海量模板库，支持海报等功能契合国内公众号生态</li><li>整合一堆第三方功能，付费之后功能完善 &amp; 性价比很高</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="向日葵-amp-花生壳"><a href="#向日葵-amp-花生壳" class="headerlink" title="向日葵 &amp; 花生壳"></a>向日葵 &amp; 花生壳</h4><p>向日葵：远程控制软件，<a href="https://sunlogin.oray.com/">https://sunlogin.oray.com/</a>。</p><p>花生壳：内网穿透软件，<a href="https://hsk.oray.com/">https://hsk.oray.com/</a>。</p><h4 id="XMind-MindMaster-EdrawMax"><a href="#XMind-MindMaster-EdrawMax" class="headerlink" title="XMind / MindMaster / EdrawMax"></a>XMind / MindMaster / EdrawMax</h4><p>脑图、流程图类工具</p><h4 id="Cryptomator"><a href="#Cryptomator" class="headerlink" title="Cryptomator"></a>Cryptomator</h4><p>开源免费的云同步网盘加密工具，<a href="https://cryptomator.org/">https://cryptomator.org/</a>。</p><h4 id="Firefox-Browser"><a href="#Firefox-Browser" class="headerlink" title="Firefox Browser"></a>Firefox Browser</h4><p><strong>务必使用国际版</strong></p><p><a href="https://www.mozilla.org/zh-CN/firefox/browsers/">https://www.mozilla.org/zh-CN/firefox/browsers/</a></p><h4 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h4><p>Free. Built on open source. Runs everywhere.</p><p>使用历史：<code>Notepad++</code> -&gt; <code>Sublime Text</code> -&gt; <code>Atom</code> -&gt; <code>Visual Studio Code</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;选取标准&quot;&gt;&lt;a href=&quot;#选取标准&quot; class=&quot;headerlink&quot; title=&quot;选取标准&quot;&gt;&lt;/a&gt;选取标准&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;“工欲善其事必先利其器”，确实能实际的提高效率。&lt;/li&gt;
&lt;li&gt;跨平台支持，可以在 Linux、Window</summary>
      
    
    
    
    <category term="articles" scheme="https://ldsink.com/categories/articles/"/>
    
    
  </entry>
  
  <entry>
    <title>庆祝中国共产党成立100周年</title>
    <link href="https://ldsink.com/articles/cpc-100th-anniversary/"/>
    <id>https://ldsink.com/articles/cpc-100th-anniversary/</id>
    <published>2021-07-01T15:45:01.000Z</published>
    <updated>2021-11-24T10:04:19.965Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://a.adcdn.cn/images/cpc-100th-anniversary.webp" alt="image"></p><p><strong>胸怀千秋伟业，恰是百年风华。</strong></p><p><strong>伟大、光荣、正确的中国共产党万岁！</strong></p><p><strong>伟大、光荣、英雄的中国人民万岁！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://a.adcdn.cn/images/cpc-100th-anniversary.webp&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;胸怀千秋伟业，恰是百年风华。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;伟大、光荣、</summary>
      
    
    
    
    <category term="articles" scheme="https://ldsink.com/categories/articles/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux 启动后自动执行命令</title>
    <link href="https://ldsink.com/articles/how-to-run-a-shell-script-at-startup/"/>
    <id>https://ldsink.com/articles/how-to-run-a-shell-script-at-startup/</id>
    <published>2021-06-27T07:40:45.000Z</published>
    <updated>2021-11-24T10:04:19.965Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 环境下，一般需要自启动执行任务，需要修改 <code>/etc/init.d</code> 或者 <code>/etc/rc.d/</code>。 这里介绍一个简单方式，通过 <code>crontab</code> 来实现这个目的。</p><p>执行</p><blockquote><p>crontab -e</p></blockquote><p>增加如下内容，其中 <code>/path/to/your/script.sh</code> 替换成需要执行的命令或者脚本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@reboot  /path/to/your/script.sh</span><br></pre></td></tr></table></figure><p><code>crontab</code> 一般用于定时执行任务，但是它还提供了 <code>@reboot</code> 用于启动之后执行。 推荐一个非常好用的网站 <a href="https://crontab.guru/">crontab.guru</a> ，可以用来检测命令，预测下一次任务的启动时间。</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li><a href="https://stackoverflow.com/questions/12973777/how-to-run-a-shell-script-at-startup">How to run a shell script at startup</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Linux 环境下，一般需要自启动执行任务，需要修改 &lt;code&gt;/etc/init.d&lt;/code&gt; 或者 &lt;code&gt;/etc/rc.d/&lt;/code&gt;。 这里介绍一个简单方式，通过 &lt;code&gt;crontab&lt;/code&gt; 来实现这个目的。&lt;/p&gt;
&lt;p&gt;执行&lt;/p&gt;</summary>
      
    
    
    
    <category term="articles" scheme="https://ldsink.com/categories/articles/"/>
    
    
    <category term="how-to" scheme="https://ldsink.com/tags/how-to/"/>
    
    <category term="linux" scheme="https://ldsink.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>设置执行 sudo 免密码</title>
    <link href="https://ldsink.com/articles/how-to-execute-sudo-without-password/"/>
    <id>https://ldsink.com/articles/how-to-execute-sudo-without-password/</id>
    <published>2021-06-27T07:00:45.000Z</published>
    <updated>2021-11-24T10:04:19.965Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 中，一些操作需要使用 <code>sudo</code> 命令进行提权到 <code>root</code> 后才可以顺利执行。默认这一步操作是需要输入密码的，可以通过设置免除密码。</p><h1 id="获取用户名"><a href="#获取用户名" class="headerlink" title="获取用户名"></a>获取用户名</h1><p>执行如下命令，获得当前用户的用户名。</p><blockquote><p>echo $USER</p></blockquote><h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><p>配置文件位于 <code>/etc/sudoers</code>，但是注意，<strong>千万不要直接修改这个文件！</strong> 我见过太多直接修改这个文件造成系统无法启动的例子了。 正确的方式是使用 <code>visudo</code> 命令修改。执行</p><blockquote><p>sudo visudo</p></blockquote><p>按下 <code>Shift+g</code> 切换到文件尾部，按下 <code>o</code> 新增一行， 将下面这一行添加到文件尾部（<code>$USER</code> 替换成之前获取到的用户名）。 <code>Shift+z+z</code> 保存并退出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">USER ALL=(ALL) NOPASSWD: ALL</span></span><br></pre></td></tr></table></figure><p>注销或者重启之后，再次使用 <code>sudo</code> 命令就不需要输入密码了。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><code>sudo</code> 本身是个危险操作，执行之后会使用最高的 <code>root</code> 权限执行命令。很多发行版第一次执行都会给出提示，比如 <code>deepin</code> 会有如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">我们信任您已经从系统管理员那里了解了日常注意事项。</span><br><span class="line">总结起来无外乎这三点：</span><br><span class="line"></span><br><span class="line">    #1) 尊重别人的隐私。</span><br><span class="line">    #2) 输入前要先考虑(后果和风险)。</span><br><span class="line">    #3) 权力越大，责任越大。</span><br></pre></td></tr></table></figure><p>同时用户目录会生成 <code>.sudo_as_admin_successful</code> 文件，表示已经给出过提示。</p><p>我非常喜欢这三点提示。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ul><li><a href="https://askubuntu.com/questions/147241/execute-sudo-without-password">Execute sudo without Password?</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Linux 中，一些操作需要使用 &lt;code&gt;sudo&lt;/code&gt; 命令进行提权到 &lt;code&gt;root&lt;/code&gt; 后才可以顺利执行。默认这一步操作是需要输入密码的，可以通过设置免除密码。&lt;/p&gt;
&lt;h1 id=&quot;获取用户名&quot;&gt;&lt;a href=&quot;#获取用户名&quot; cla</summary>
      
    
    
    
    <category term="articles" scheme="https://ldsink.com/categories/articles/"/>
    
    
    <category term="how-to" scheme="https://ldsink.com/tags/how-to/"/>
    
    <category term="linux" scheme="https://ldsink.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Firefox 首次支持 Linux 上的硬件加速功能</title>
    <link href="https://ldsink.com/articles/firefox-were-finally-getting-hw-acceleration-on-linux/"/>
    <id>https://ldsink.com/articles/firefox-were-finally-getting-hw-acceleration-on-linux/</id>
    <published>2021-01-12T03:20:14.000Z</published>
    <updated>2021-06-22T05:43:59.820Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://a.adcdn.cn/images/firefox-quantum-engine.webp" alt="firefox-quantum-engine"></p><p>看到一则令人开心的消息<a href="https://mastransky.wordpress.com/2021/01/10/firefox-were-finally-getting-hw-acceleration-on-linux/">Firefox – we’re finally getting HW acceleration on Linux</a>。目前 Firefox 在 Linux 下并不支持硬件加速，导致其在B站播放视频非常容易卡顿。我目前安装了一个 Chrome 专门用于看B站视频。期待 Firefox 早日实现全部功能，在 Linux 下也拥有流畅的效果。</p><p>可以在 <code>about:support</code> 内查看目前使用的图像合成引擎，我这里 Firefox Developer Edition 85.0b7 还是 <code>OpenGL</code>，希望早日用上 <code>WebRender</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://a.adcdn.cn/images/firefox-quantum-engine.webp&quot; alt=&quot;firefox-quantum-engine&quot;&gt;&lt;/p&gt;
&lt;p&gt;看到一则令人开心的消息&lt;a href=&quot;https://mastran</summary>
      
    
    
    
    
    <category term="firefox" scheme="https://ldsink.com/tags/firefox/"/>
    
  </entry>
  
  <entry>
    <title>密钥文件取舍</title>
    <link href="https://ldsink.com/articles/organize-key-files/"/>
    <id>https://ldsink.com/articles/organize-key-files/</id>
    <published>2020-09-11T04:30:46.000Z</published>
    <updated>2021-06-22T05:43:59.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="密钥的取舍"><a href="#密钥的取舍" class="headerlink" title="密钥的取舍"></a>密钥的取舍</h3><p>系统里面，积累起来的 SSH 密钥已经包含了 <code>rsa</code>、<code>dsa</code>、<code>ecdsa</code> 和 <code>ed25519</code> 四对。基于 <strong>“同类型的保留一种，安全性高优先”</strong> 的原则进行清理。已知：</p><ul><li><code>rsa</code> 和 <code>dsa</code> 基于大数因数分解。</li><li><code>ecdsa</code> 和 <code>ed25519</code> 基于椭圆曲线离散对数问题。</li><li><code>rsa</code> 长度 4096 位之后目前可以视为安全。</li><li><code>dsa</code> 已被认为不安全。</li><li><code>ecdsa</code> 政治上：算法选择由 <a href="https://www.nist.gov/">NIST</a> 设定；技术上：过于复杂以至于无法完善的检查。因此也视为不安全。</li><li><code>ed25519</code> 安全性最高，性能最好。<a href="https://www.openssh.com/txt/release-6.5">但是需要比较新的版本（OpenSSH 6.5+）才支持</a>。</li></ul><p>最后保留4096位的<code>rsa</code>密钥和<code>ed25519</code>密钥。在允许的情况下优先使用<code>ed25519</code>密钥。</p><h3 id="“秘”和“密”的区别"><a href="#“秘”和“密”的区别" class="headerlink" title="“秘”和“密”的区别"></a>“秘”和“密”的区别</h3><p>这是一个题外话。前几天同事注释把密钥写成了秘钥，我发现了这个错别字。改正之后，我们对这个字的含义产生了兴趣。因为“秘密”这个词表示隐秘，两个单字应该都有近似的含义，那为什么是“密钥”而不是“秘钥”。“秘”和“密”的区别是什么？</p><p>一番查证，归纳出了如下区别：</p><table><thead><tr><th>秘</th><th>密</th></tr></thead><tbody><tr><td>客观，被动</td><td>主观，主动</td></tr><tr><td>内容本身隐蔽，强调的是不易知</td><td>需要去隐蔽内容，强调的是不让知</td></tr><tr><td>神鬼之事、高深莫测、罕闻稀见</td><td>人为之事、故意遮掩、严加控制</td></tr><tr><td>例词：秘本、秘方、秘史、秘闻、秘笈</td><td>例词：密封、密谈、密约、保密、泄密、解密、绝密、机密</td></tr></tbody></table><p>汉语博大精深。</p><h3 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h3><ul><li><a href="https://medium.com/@honglong/%E9%81%B8%E6%93%87-ssh-key-%E7%9A%84%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95-70ca45c94d8e">選擇 SSH key 的加密演算法</a></li><li><a href="https://sohfrance.com/%E7%A7%98%E3%80%81%E5%AF%86%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%AB%EF%BC%9F/">秘、密如何区别</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;密钥的取舍&quot;&gt;&lt;a href=&quot;#密钥的取舍&quot; class=&quot;headerlink&quot; title=&quot;密钥的取舍&quot;&gt;&lt;/a&gt;密钥的取舍&lt;/h3&gt;&lt;p&gt;系统里面，积累起来的 SSH 密钥已经包含了 &lt;code&gt;rsa&lt;/code&gt;、&lt;code&gt;dsa&lt;/code&gt;、&lt;</summary>
      
    
    
    
    <category term="articles" scheme="https://ldsink.com/categories/articles/"/>
    
    
  </entry>
  
  <entry>
    <title>UOS（deepin）20 桌面版体验</title>
    <link href="https://ldsink.com/articles/uos-20/"/>
    <id>https://ldsink.com/articles/uos-20/</id>
    <published>2020-07-14T04:17:26.000Z</published>
    <updated>2021-06-22T05:43:59.820Z</updated>
    
    <content type="html"><![CDATA[<p>本来刚出就打算升级的，各种原因耽误了，最近终于动手升级了系统版本。下文为纯主观体验。</p><h2 id="系统变化"><a href="#系统变化" class="headerlink" title="系统变化"></a>系统变化</h2><ul><li>界面比 15 版本好看很多，整个系统风格统一成圆角风格。</li><li>默认壁纸多了一些漂亮的风景画。</li><li>UOS 20 个人版作为商业版本需要激活，并且需要登录账号进入开发者模式才能打开 root 权限。deepin 20 作为社区版本无此限制。</li><li>底层基于 debian 10.3，内核 5.3。安装第三方应用可以依次找对应的包。lsb_release 无法获取版本号，实际应该是 debian buster。</li><li>默认是个简单的套壳浏览器。按需换成 Firefox 或者 Chrome（期待巨硬未来的 Edge）。</li><li>应用商店软件版本比 15 新很多。deepin 人手也不多，目前看起来只能尽力维护 20 版本的，体谅。</li><li>因为有私有软件，更新源变成两个。系统一个，独立的应用商店一个。从这里可以得到 UOS20 的 codename 应该是 plum，应用商店是 eagle。</li></ul><h2 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h2><p>默认的终端变回了 bash，并且用的是 debian 默认的 gnome 终端，可以在应用商店安装老版本的 deepin-terminal。</p><h3 id="当前用户-sudo-免密码-Ref"><a href="#当前用户-sudo-免密码-Ref" class="headerlink" title="当前用户 sudo 免密码 Ref"></a>当前用户 sudo 免密码 <a href="https://askubuntu.com/questions/147241/execute-sudo-without-password">Ref</a></h3><blockquote><p>sudo visudo<br>$USER ALL=(ALL) NOPASSWD: ALL</p></blockquote><p><code>$USER</code>替换成当前用户名</p><h3 id="默认编辑器使用-vim"><a href="#默认编辑器使用-vim" class="headerlink" title="默认编辑器使用 vim"></a>默认编辑器使用 vim</h3><blockquote><p>sudo update-alternatives –config editor</p></blockquote><h3 id="切换-zsh"><a href="#切换-zsh" class="headerlink" title="切换 zsh"></a>切换 zsh</h3><p>参考<a href="https://ldsink.com/articles/install-zsh-on-ubuntu/">Ubuntu 上安装 zsh</a></p><h2 id="权限和配置"><a href="#权限和配置" class="headerlink" title="权限和配置"></a>权限和配置</h2><p>一些配置文件从旧系统复制到新系统，包括</p><ul><li>.ssh</li><li>.gnupg</li><li>.profile</li><li>.zshrc</li><li>.vscode</li><li>.pip</li><li>.docker</li><li>.npm</li><li>.fonts</li><li>.gitconfig</li><li>.git-credentials</li><li>.gitignore</li><li>Jetbrains 全家桶各个配置</li></ul><h2 id="软件应用"><a href="#软件应用" class="headerlink" title="软件应用"></a>软件应用</h2><h3 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h3><ul><li>默认输入法不再是搜狗，搜狗官网的包有问题，需要命令行安装。<code>sudo apt install sogoupinyin -y</code></li><li>可以在应用商店内安装迅飞输入法。</li><li>百度输入法目前的体验很糟糕，正常用还需要等等。</li></ul><h3 id="安全中心"><a href="#安全中心" class="headerlink" title="安全中心"></a>安全中心</h3><p>这个东西看用途是一个可视化的防火墙，为普通用户提供网络管理功能。<br>但是，对于开发者来说，这东西极其糟糕，建议卸载。主要问题是<strong>这东西会限制一些服务的端口监听</strong>，调试需要使用的一些代理都会被限制。</p><p>命令行卸载：</p><blockquote><p>sudo apt remove -y deepin-defender</p></blockquote><p>删除配置文件：</p><blockquote><p>rm ~/.deepin-defender</p></blockquote><p>重启之后恢复正常</p><h3 id="坚果云"><a href="#坚果云" class="headerlink" title="坚果云"></a>坚果云</h3><p>目前应用商店没有上架，我使用源代码方式编译安装。安装完成之后还需要多装一个 Notify，之后重启电脑，可以正常使用。</p><blockquote><p>sudo apt install gir1.2-notify-0.7</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本来刚出就打算升级的，各种原因耽误了，最近终于动手升级了系统版本。下文为纯主观体验。&lt;/p&gt;
&lt;h2 id=&quot;系统变化&quot;&gt;&lt;a href=&quot;#系统变化&quot; class=&quot;headerlink&quot; title=&quot;系统变化&quot;&gt;&lt;/a&gt;系统变化&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;界面比 15</summary>
      
    
    
    
    <category term="articles" scheme="https://ldsink.com/categories/articles/"/>
    
    
    <category term="deepin" scheme="https://ldsink.com/tags/deepin/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 调整笔记</title>
    <link href="https://ldsink.com/articles/tuning-nginx/"/>
    <id>https://ldsink.com/articles/tuning-nginx/</id>
    <published>2020-04-10T08:27:49.000Z</published>
    <updated>2021-06-22T05:43:59.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="调整-Linux-配置"><a href="#调整-Linux-配置" class="headerlink" title="调整 Linux 配置"></a>调整 Linux 配置</h1><h2 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h2><h3 id="系统层面"><a href="#系统层面" class="headerlink" title="系统层面"></a>系统层面</h3><p>编辑 <code>/etc/sysctl.conf</code> 文件，调整 <code>fs.file-max</code> 参数值。</p><blockquote><p>fs.file-max = 200000</p></blockquote><p>验证方式：</p><blockquote><p>cat /proc/sys/fs/file-max</p></blockquote><h3 id="用户层面"><a href="#用户层面" class="headerlink" title="用户层面"></a>用户层面</h3><p>编辑 <code>/etc/security/limits.conf</code>，增加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*  soft nproc  65535</span><br><span class="line">*  hard nproc  65535</span><br><span class="line">*  soft nofile 65535</span><br><span class="line">*  hard nofile 65535</span><br></pre></td></tr></table></figure><p>验证方式：</p><blockquote><p>ulimit -n</p></blockquote><h2 id="临时端口"><a href="#临时端口" class="headerlink" title="临时端口"></a>临时端口</h2><p>编辑 <code>/etc/sysctl.conf</code> 文件，调整 <code>net.ipv4.ip_local_port_range</code> 参数值。</p><blockquote><p>net.ipv4.ip_local_port_range = 1024 65000</p></blockquote><p>验证方式：</p><blockquote><p>cat /proc/sys/net/ipv4/ip_local_port_range</p></blockquote><h1 id="调整-Nginx-配置"><a href="#调整-Nginx-配置" class="headerlink" title="调整 Nginx 配置"></a>调整 Nginx 配置</h1><h2 id="Worker-Processes"><a href="#Worker-Processes" class="headerlink" title="Worker Processes"></a>Worker Processes</h2><ul><li><a href="https://nginx.org/en/docs/ngx_core_module.html#worker_processes">worker_processes</a> - 和CPU核心数一致，建议直接使用<code>auto</code>。</li><li><a href="https://nginx.org/en/docs/ngx_core_module.html#worker_connections">worker_connections</a> - <code>worker_processes</code>*<code>worker_connections</code> 即为总并发数，根据实际情况调整。</li><li><a href="https://nginx.org/en/docs/ngx_core_module.html#worker_rlimit_nofile">worker_rlimit_nofile</a> - worker 进程打开的最大文件数，可设置为用户的文件打开限制 <code>ulimit -n</code>。</li></ul><h2 id="保持连接"><a href="#保持连接" class="headerlink" title="保持连接"></a>保持连接</h2><p>相关介绍： <a href="https://www.nginx.com/blog/http-keepalives-and-web-performance/">HTTP Keepalive Connections and Web Performance</a></p><ul><li><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_requests">keepalive_requests</a> - 建议根据实际情况调高</li><li><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_timeout">keepalive_timeout</a> – 空闲连接关闭时间</li></ul><h2 id="访问日志"><a href="#访问日志" class="headerlink" title="访问日志"></a>访问日志</h2><p>记录日志会消耗 CPU 和 I/O 资源。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="隐藏-Nginx-具体版本"><a href="#隐藏-Nginx-具体版本" class="headerlink" title="隐藏 Nginx 具体版本"></a>隐藏 Nginx 具体版本</h3><blockquote><p>server_tokens off;</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.nginx.com/blog/tuning-nginx/">Tuning NGINX for Performance</a></li><li><a href="https://www.nginx.com/blog/http-keepalives-and-web-performance/">HTTP Keepalive Connections and Web Performance</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;调整-Linux-配置&quot;&gt;&lt;a href=&quot;#调整-Linux-配置&quot; class=&quot;headerlink&quot; title=&quot;调整 Linux 配置&quot;&gt;&lt;/a&gt;调整 Linux 配置&lt;/h1&gt;&lt;h2 id=&quot;文件描述符&quot;&gt;&lt;a href=&quot;#文件描述符&quot; class</summary>
      
    
    
    
    <category term="articles" scheme="https://ldsink.com/categories/articles/"/>
    
    
    <category term="nginx" scheme="https://ldsink.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>toolbox 的一些更新</title>
    <link href="https://ldsink.com/articles/toolbox-updates-2020-02/"/>
    <id>https://ldsink.com/articles/toolbox-updates-2020-02/</id>
    <published>2020-02-10T07:21:49.000Z</published>
    <updated>2021-06-22T05:43:59.820Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/ldsink/toolbox/">toolbox</a> 是自己整理的一些脚本库，将平时用的多的常用操作固定成脚本，可追踪可维护，减少重复劳动。主要有脚本、Shell命令和<code>docker-compose</code>配置三块。</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><ul><li>增加了 <a href="https://raw.githubusercontent.com/ldsink/toolbox/master/install-python.sh">install-python.sh</a> 脚本，方便编译安装对应的 Python 版本</li><li>统一了脚本文件名，依照动词+用途命名，例如 <code>install-XXX</code>、<code>set-XXX</code></li><li><code>Shebang</code> 均使用 <code>#!/usr/bin/env bash</code> <a href="https://en.wikipedia.org/w/index.php?title=Shebang_(Unix)#Portability">提高兼容性</a></li><li>更新、删除了一些失效脚本</li></ul><h3 id="docker-compose配置"><a href="#docker-compose配置" class="headerlink" title="docker-compose配置"></a><code>docker-compose</code>配置</h3><p>简单更新了一下镜像版本。</p><p>其他的遇到了一个有意思的问题，如何在 Jenkins 的容器内继续使用 Docker。参考 <a href="https://forums.docker.com/t/using-docker-in-a-dockerized-jenkins-container/322">Using docker in a dockerized Jenkins container</a> 更新编排文件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/ldsink/toolbox/&quot;&gt;toolbox&lt;/a&gt; 是自己整理的一些脚本库，将平时用的多的常用操作固定成脚本，可追踪可维护，减少重复劳动。主要有脚本、Shell命令和&lt;code&gt;docker-compose&lt;/c</summary>
      
    
    
    
    <category term="articles" scheme="https://ldsink.com/categories/articles/"/>
    
    
  </entry>
  
  <entry>
    <title>2020 新年快乐！</title>
    <link href="https://ldsink.com/articles/2020-happy-new-year/"/>
    <id>https://ldsink.com/articles/2020-happy-new-year/</id>
    <published>2020-01-01T06:00:18.000Z</published>
    <updated>2021-06-22T05:43:59.820Z</updated>
    
    <content type="html"><![CDATA[<p>21世纪的第三个十年，加油！</p><p><img src="https://a.adcdn.cn/images/2020-dream.webp" alt="2020-dream"></p><p><img src="https://a.adcdn.cn/images/python2.7-countdown.webp" alt="python2.7-countdown"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;21世纪的第三个十年，加油！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://a.adcdn.cn/images/2020-dream.webp&quot; alt=&quot;2020-dream&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://a.adcdn.cn/images/p</summary>
      
    
    
    
    <category term="articles" scheme="https://ldsink.com/categories/articles/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux QQ 全新回归</title>
    <link href="https://ldsink.com/articles/linux-qq-come-back/"/>
    <id>https://ldsink.com/articles/linux-qq-come-back/</id>
    <published>2019-10-25T05:17:47.000Z</published>
    <updated>2021-06-22T05:43:59.820Z</updated>
    
    <content type="html"><![CDATA[<p>看到一则新闻，Linux QQ全新回归，号称“从心出发·趣无止境”。官网：<a href="https://im.qq.com/linuxqq/">https://im.qq.com/linuxqq/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Linux QQ 2.0.0 Beta（New）2019&#x2F;10&#x2F;24</span><br><span class="line">    - Linux QQ全新回归</span><br><span class="line">    - 支持x64、ARM64、MIPS64三种架构</span><br><span class="line">    - 优化消息体验，完善消息收发能力</span><br><span class="line">    - 性能优化</span><br></pre></td></tr></table></figure><p>高中竞赛的时候 QQ 有 Linux 版本，可惜后面不维护，再后面就没了。现在重新发布，第一时间下载体验。很遗憾，这个复古的界面效果，和十年前的界面没太多的区别。deepin 深色主题下，聊天框背景还都是黑的，很难看清聊天窗口。</p><p>麻利的卸载，继续打开了 Tim，感谢 deepin 商店配置的 wine Tim。希望腾讯继续努力，以后 Linux 原生版本的体验能达到正常水平。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;看到一则新闻，Linux QQ全新回归，号称“从心出发·趣无止境”。官网：&lt;a href=&quot;https://im.qq.com/linuxqq/&quot;&gt;https://im.qq.com/linuxqq/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight pla</summary>
      
    
    
    
    <category term="articles" scheme="https://ldsink.com/categories/articles/"/>
    
    
    <category term="linux" scheme="https://ldsink.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Python 编码风格指南</title>
    <link href="https://ldsink.com/articles/python-style-guide/"/>
    <id>https://ldsink.com/articles/python-style-guide/</id>
    <published>2019-10-23T08:36:09.000Z</published>
    <updated>2021-06-22T05:43:59.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总则"><a href="#总则" class="headerlink" title="总则"></a>总则</h1><p>除非项目有自己的约定，默认应该遵循 <a href="https://www.python.org/dev/peps/pep-0008/">PEP8</a> 和 <a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/contents/">Google Python 风格指南</a> 的要求。在开始编写代码前，请阅读并了解这两个文档。</p><h1 id="项目约定"><a href="#项目约定" class="headerlink" title="项目约定"></a>项目约定</h1><h2 id="代码布局"><a href="#代码布局" class="headerlink" title="代码布局"></a>代码布局</h2><h3 id="风格"><a href="#风格" class="headerlink" title="风格"></a>风格</h3><ul><li><code>list</code>，<code>tuple</code>，<code>dict</code> 多行定义的时候，每行结尾增加<code>,</code>，用于减少 <code>git diff</code> 时候的变动。</li></ul><h3 id="行长度"><a href="#行长度" class="headerlink" title="行长度"></a>行长度</h3><p>最大行长度180，推荐不超过120。</p><p>推荐在 PyCharm 内设置 <a href="https://www.jetbrains.com/help/pycharm/code-style-python.html#wrapping_and_braces">Wrapping and braces</a>，<code>Visual guides</code>设置为 <code>120, 180</code>。</p><h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><p><strong>使用 <code>format</code> 函数进行格式化</strong>，不使用 <code>%</code> 的方式。</p><h3 id="导入格式"><a href="#导入格式" class="headerlink" title="导入格式"></a>导入格式</h3><p>导入超过一行的情况下，使用括号包住引入模块。左括号后直接换行，右括号前不加内容。如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> package_name <span class="keyword">import</span> (</span><br><span class="line">    module_1, module_2, module_3, module_4, module_5</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="嵌套函数（Nested-function）"><a href="#嵌套函数（Nested-function）" class="headerlink" title="嵌套函数（Nested function）"></a>嵌套函数（Nested function）</h3><ul><li>嵌套函数声明在使用的代码之前的地方</li><li>嵌套函数必须以<code>_</code>前缀开头</li></ul><h3 id="函数命名"><a href="#函数命名" class="headerlink" title="函数命名"></a>函数命名</h3><ul><li>判断检查类型逻辑的函数以 <code>is_</code> 或 <code>has_</code> 前缀开头，返回值应该是 <code>bool</code> 类型</li><li>验证校验类型逻辑的函数以 <code>check_</code> 或 <code>validate_</code> 前缀开头，返回值可以包括相关的对象</li><li>进行操作的函数应该以动词开头，如 <code>set_</code>、<code>get_</code>、<code>process_</code>、<code>enable_</code>、<code>disable_</code> 等</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;总则&quot;&gt;&lt;a href=&quot;#总则&quot; class=&quot;headerlink&quot; title=&quot;总则&quot;&gt;&lt;/a&gt;总则&lt;/h1&gt;&lt;p&gt;除非项目有自己的约定，默认应该遵循 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/&quot;&gt;</summary>
      
    
    
    
    <category term="articles" scheme="https://ldsink.com/categories/articles/"/>
    
    
    <category term="python" scheme="https://ldsink.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Happy 15th Birthday, Ubuntu!</title>
    <link href="https://ldsink.com/articles/happy-15th-birthday-ubuntu/"/>
    <id>https://ldsink.com/articles/happy-15th-birthday-ubuntu/</id>
    <published>2019-10-23T05:47:26.000Z</published>
    <updated>2021-06-22T05:43:59.820Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://a.adcdn.cn/images/happy-15th-birthday-ubuntu.webp" alt="happy-15th-birthday-ubuntu"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://a.adcdn.cn/images/happy-15th-birthday-ubuntu.webp&quot; alt=&quot;happy-15th-birthday-ubuntu&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="articles" scheme="https://ldsink.com/categories/articles/"/>
    
    
    <category term="ubuntu" scheme="https://ldsink.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Greenplum 简单体验</title>
    <link href="https://ldsink.com/articles/greenplum-simple-experience/"/>
    <id>https://ldsink.com/articles/greenplum-simple-experience/</id>
    <published>2019-10-22T12:04:27.000Z</published>
    <updated>2021-06-22T05:43:59.820Z</updated>
    
    <content type="html"><![CDATA[<p>接入新客户的数据，处理的数据量比之前上了一个量级。以前的索引数据库用的 PostgreSQL ，客户端代码暂时没空修改，为了支持这批数据，打算迁移到 Greenplum。</p><p>Greenplum 是先进的基于 PostgreSQL 的开源分布式数据库之一。因为兼容 PostgreSQL 的接口，客户端无需做太多的修改就可以使用。本身是基于MPP架构设计的一套数据分析系统，方便扩展，系统稳定，很适合我们的场景。<a href="https://greenplum.org/">Greenplum</a>是<a href="https://pivotal.io/">Pivotal</a>旗下的产品，有商业公司开发和维护，会有更好的技术支持和服务。</p><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p><img src="https://a.adcdn.cn/images/greenplum-highlevel-arch.webp" alt="greenplum-highlevel-arch"></p><p><a href="https://greenplum.org/">Greenplum</a>基于MPP架构，如上。 Master 节点作为系统的入口，处理SQL请求。 Segment 节点存储和处理数据。 Master 和 Segment 之间通过 Interconnect 这个网络层连接起来。</p><p>一个SQL查询到 Master 节点， Master 会分发到 Segment 节点进行计算，计算结果最后再汇总到 Master 节点，处理好之后返回数据。 Master 和 Segment 分别通过 StandBy Master 和 Mirror 节点提供高可用。 Segment 节点之间并没有太多的数据交互。这种架构好处是简单，好扩展，但是感觉 Master 节点容易成为系统的瓶颈。整个系统的入口和数据最后的汇总都在 Master 节点上，负载可不轻松。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://greenplum.org/">Greenplum</a>提供了详细的<a href="https://gpdb.docs.pivotal.io/6-0/install_guide/install_guide.html">安装文档</a>， 6.0 新版本刚发布，我直接使用的新版本。</p><p>主要安装步骤如下：</p><ol><li>检查系统、硬件是否满足条件</li><li>操作系统配置修改</li><li>Greenplum 用户创建</li><li>Greenplum 系统安装</li><li>Greenplum 系统初始化</li></ol><p>提供了 ansible 脚本：<a href="https://gpdb.docs.pivotal.io/6-0/install_guide/ansible-example.html">https://gpdb.docs.pivotal.io/6-0/install_guide/ansible-example.html</a></p><h2 id="软硬件要求"><a href="#软硬件要求" class="headerlink" title="软硬件要求"></a>软硬件要求</h2><ul><li>主流的操作系统都行</li><li>必须使用 XFS 文件系统 <del>实测其他的也行，不过最好按照官方文档用XFS，其他可能影响性能</del></li><li>内存 16G +，硬盘要求导入数据后可用空间大于30% <del>实测够用就行</del></li><li>10Gbps 内网宽带 <del>不满足也能用</del></li></ul><h2 id="操作系统配置修改"><a href="#操作系统配置修改" class="headerlink" title="操作系统配置修改"></a>操作系统配置修改</h2><p>主要三个：</p><ol><li>关闭 SELinux： 在 <code>/etc/selinux/config</code> 中设置 <code>SELINUX=disabled</code>，重启即可</li><li>关闭防火墙：CentOS firewalld / Ubuntu ufw</li><li>同步系统时间：系统NTP服务需要打开，时间必须一致</li></ol><h2 id="Greenplum-用户创建"><a href="#Greenplum-用户创建" class="headerlink" title="Greenplum 用户创建"></a>Greenplum 用户创建</h2><p>也是三个，首先创建  gpadmin  用户和用户组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd gpadmin</span><br><span class="line">sudo useradd gpadmin -r -m -g gpadmin</span><br></pre></td></tr></table></figure><p>再生成密钥对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo su gpadmin</span><br><span class="line">chsh -s &#x2F;bin&#x2F;bash</span><br><span class="line">ssh-keygen -o -a 100 -t ed25519</span><br><span class="line">cp .ssh&#x2F;id_ed25519.pub .ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure><p>最后将管理用户设置为  sudo  免密，方便以后自己操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;pgadmin ALL&#x3D;(ALL) NOPASSWD: ALL&#39; | EDITOR&#x3D;&#39;tee -a&#39; visudo</span><br></pre></td></tr></table></figure><h2 id="Greenplum-系统安装"><a href="#Greenplum-系统安装" class="headerlink" title="Greenplum 系统安装"></a>Greenplum 系统安装</h2><p><a href="https://greenplum.org/install-greenplum-oss-on-ubuntu/">Ubuntu 系统有现成的PPA源</a>，Pivotal也提供编译好的二进制包。我选择的是最新版本的  greenplum-db。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:greenplum&#x2F;db</span><br><span class="line">sudo apt install greenplum-db</span><br></pre></td></tr></table></figure><h2 id="Greenplum-系统初始化"><a href="#Greenplum-系统初始化" class="headerlink" title="Greenplum 系统初始化"></a>Greenplum 系统初始化</h2><p><a href="https://gpdb.docs.pivotal.io/6-0/install_guide/init_gpdb.html">文档在此</a>，需要在  master  节点上操作。</p><h3 id="创建用于初始化的-host-文件"><a href="#创建用于初始化的-host-文件" class="headerlink" title="创建用于初始化的 host 文件"></a>创建用于初始化的 host 文件</h3><p>创建 <code>hostfile_gpinitsystem</code> 包括所有 segment 节点的地址，不包括 master 和 standby master。更改配置文件，确保 master 到各个 segment 节点的连接正确。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keyscan -f hostfile_gpinitsystem || sudo tee -a &#x2F;etc&#x2F;ssh&#x2F;ssh_known_hosts</span><br><span class="line">gpssh-exkeys -f hostfile_gpinitsystem</span><br></pre></td></tr></table></figure><h3 id="创建-Greenplum-数据库配置文件"><a href="#创建-Greenplum-数据库配置文件" class="headerlink" title="创建 Greenplum 数据库配置文件"></a>创建 Greenplum 数据库配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source &#x2F;opt&#x2F;greenplum-db-6.0.1&#x2F;greenplum_path.sh</span><br><span class="line">cp &#x2F;opt&#x2F;greenplum-db-6.0.1&#x2F;docs&#x2F;cli_help&#x2F;gpconfigs&#x2F;gpinitsystem_config &#x2F;home&#x2F;gpadmin&#x2F;gpinitsystem_config</span><br></pre></td></tr></table></figure><p>主要修改的几个参数按照文档要求的填对就行。</p><h3 id="创建数据存储区域"><a href="#创建数据存储区域" class="headerlink" title="创建数据存储区域"></a>创建数据存储区域</h3><p>需要在各个类型的节点上创建 Greenplum 用于存储数据的路径，并配置好权限。数据存储路径需要和配置文件的保持一致。可以利用 Greenplum 提供的工具在 master 节点操作整个网络。</p><p>Master</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;data&#x2F;master</span><br><span class="line">chown gpadmin:gpadmin &#x2F;data&#x2F;master</span><br></pre></td></tr></table></figure><p>Standby master</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source &#x2F;opt&#x2F;greenplum-db-6.0.1&#x2F;greenplum_path.sh</span><br><span class="line">gpssh -h smdw -e &#39;mkdir -p &#x2F;data&#x2F;master&#39;</span><br><span class="line">gpssh -h smdw -e &#39;chown gpadmin:gpadmin &#x2F;data&#x2F;master&#39;</span><br></pre></td></tr></table></figure><p>Segment</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">source &#x2F;opt&#x2F;greenplum-db-6.0.1&#x2F;greenplum_path.sh</span><br><span class="line">gpssh -f hostfile_gpinitsystem -e &#39;mkdir -p &#x2F;data&#x2F;data-1&#39;</span><br><span class="line">gpssh -f hostfile_gpinitsystem -e &#39;mkdir -p &#x2F;data&#x2F;data-2&#39;</span><br><span class="line">gpssh -f hostfile_gpinitsystem -e &#39;mkdir -p &#x2F;data&#x2F;data-3&#39;</span><br><span class="line">gpssh -f hostfile_gpinitsystem -e &#39;chown -R gpadmin:gpadmin &#x2F;data&#x2F;data-*&#39;</span><br></pre></td></tr></table></figure><p>Mirror</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">source &#x2F;opt&#x2F;greenplum-db-6.0.1&#x2F;greenplum_path.sh</span><br><span class="line">gpssh -f hostfile_gpinitsystem -e &#39;mkdir -p &#x2F;data&#x2F;mirror-1&#39;</span><br><span class="line">gpssh -f hostfile_gpinitsystem -e &#39;mkdir -p &#x2F;data&#x2F;mirror-2&#39;</span><br><span class="line">gpssh -f hostfile_gpinitsystem -e &#39;mkdir -p &#x2F;data&#x2F;mirror-3&#39;</span><br><span class="line">gpssh -f hostfile_gpinitsystem -e &#39;chown -R gpadmin:gpadmin &#x2F;data&#x2F;mirror-*&#39;</span><br></pre></td></tr></table></figure><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3><p>上面都整好了，就可以执行命令初始化数据库了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpinitsystem -c gpinitsystem_config -h hostfile_gpinitsystem</span><br></pre></td></tr></table></figure><p>为了方便以后的操作，可以增加下面内容到 <code>.bashrc</code>，不用每次 <code>source</code> 引入环境变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source &#x2F;opt&#x2F;greenplum-db-6.0.1&#x2F;greenplum_path.sh</span><br><span class="line">export MASTER_DATA_DIRECTORY&#x3D;&#x2F;data&#x2F;master&#x2F;gpseg-1</span><br></pre></td></tr></table></figure><h1 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h1><p>生产环境使用的 PostgreSQL 11，使用了很多新特性，包括<a href="https://www.postgresql.org/docs/9.5/brin-intro.html">BRIN</a>等。Greenplum 6 还是基于 PG 9.4 版本，一些东西老版本的不支持，需要特别注意，处理一下。</p><p>迁移使用PG自带的工具  pg_dump  和  psql ，很快可以灌入数据。</p><h1 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h1><p>小问题就不提了，看 log 和文档定位到修改就好了，说一个奇葩的问题。</p><p>查询一个SQL语句，只要带  Group By  就无法返回结果，而  sum  却可以拿到结果。查看日志没有报错。查询就是等待返回数据，非常诡异。master 和 segment 节点是有超时设置的，如果是 segment 查询超时，应该会有错误日志，但是很诡异，就是没有详细的异常日志。根据Greenplum的架构图，猜测应该是 master 节点处理的问题，但是继续检查配置文件、检查Log，依旧找不到问题。</p><p>搜索结果中看到了<a href="https://ieevee.com/tech/2017/07/06/gp-ic.html">三罐可乐带你读懂Greenplum的interconnect</a>，可能是 Greenplum 的 interconnect 导致 master 对 segment 返回的结果处理有奇怪的逻辑。整个网络状态是正常的，端口监听也正常。反思整个部署过程，打开了 <code>/etc/hosts</code> 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&#96;&#96;&#96;&#96;&#96;&#96;hostname1</span><br><span class="line"></span><br><span class="line">172.31.0.2&#96;&#96;&#96;&#96;&#96;&#96;hostname1</span><br><span class="line">172.31.0.3&#96;&#96;&#96;&#96;&#96;&#96;hostname2</span><br><span class="line">172.31.0.4&#96;&#96;&#96;&#96;&#96;&#96;hostname3</span><br></pre></td></tr></table></figure><p>云服务器的系统会在 hosts 文件将自己的 hostname 配置成 <code>127.0.0.1</code>，搭建  Greenplum  集群的时候设置的 hosts 添加在这一行下面。删除本机 <code>127.0.0.1</code> 的配置，重启系统，恢复正常。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;接入新客户的数据，处理的数据量比之前上了一个量级。以前的索引数据库用的 PostgreSQL ，客户端代码暂时没空修改，为了支持这批数据，打算迁移到 Greenplum。&lt;/p&gt;
&lt;p&gt;Greenplum 是先进的基于 PostgreSQL 的开源分布式数据库之一。因为兼容</summary>
      
    
    
    
    <category term="articles" scheme="https://ldsink.com/categories/articles/"/>
    
    
    <category term="greenplum" scheme="https://ldsink.com/tags/greenplum/"/>
    
    <category term="postgres" scheme="https://ldsink.com/tags/postgres/"/>
    
  </entry>
  
  <entry>
    <title>deepin V15.11 发布</title>
    <link href="https://ldsink.com/articles/deepin-15.11-released/"/>
    <id>https://ldsink.com/articles/deepin-15.11-released/</id>
    <published>2019-07-20T14:25:10.000Z</published>
    <updated>2021-06-22T05:43:59.820Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://a.adcdn.cn/images/deepin-15.11.webp" alt="deepin-15.11"></p><p>深度操作系统V15.11已经发布，发行标记见：<a href="https://www.deepin.org/2019/07/19/deepin15-11/">深度操作系统 V15.11——心随意动 畅享云端</a></p><p>这个版本一个大的变化是早先的 unstable 版本已正式停止技术支持，所有 unstable 用户需要重新下载安装 stable 版本。个人觉得这是个非常不友好的变动，无论如何，重新安装系统成本都是非常巨大的。早先 deepin 切换到基于 debian 时的一个目标就是学习 Arch 的滚动升级策略，复杂升级不再需要重装系统，现在看未实现这个功能。</p><p>桌面环境的一个变动是从之前的 dde-wm 升级到了 dde-kwin，目的主要是通过使用新的 kwin 来支持 Wayland。但是新开发一套桌面的窗口管理系统是很麻烦的，需要时间来完善。目前的 dde-kwin 很多功能还是缺失的，右键菜单刚支持极少的功能。Firefox 浏览器上因为 dde-kwin 带来的窗口条无法隐藏，严重影响美观。</p><p>其他主要是一些内置软件的功能更新和BUG修复。这类内置软件，我的态度是够用就行，美观最好。这里就不再赘述了。</p><p>deepin 是国内最用心的在做 Linux 操作系统的厂商，这一点指的表扬和尊敬。但是人是要恰饭的，公司是要盈利的。现在王勇离开，企业被360收购，前途多了一些不确定。希望未来 deepin 能在进一步商业化探索的同时，保持自己的初心。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://a.adcdn.cn/images/deepin-15.11.webp&quot; alt=&quot;deepin-15.11&quot;&gt;&lt;/p&gt;
&lt;p&gt;深度操作系统V15.11已经发布，发行标记见：&lt;a href=&quot;https://www.deepin.org/</summary>
      
    
    
    
    <category term="articles" scheme="https://ldsink.com/categories/articles/"/>
    
    
    <category term="deepin" scheme="https://ldsink.com/tags/deepin/"/>
    
  </entry>
  
  <entry>
    <title>再见，readfree</title>
    <link href="https://ldsink.com/articles/goodbye-readfree/"/>
    <id>https://ldsink.com/articles/goodbye-readfree/</id>
    <published>2019-07-05T12:03:59.000Z</published>
    <updated>2021-06-22T05:43:59.820Z</updated>
    
    <content type="html"><![CDATA[<p>今晚打开 readfree 的网站，不再是熟悉的界面，而是一封告别辞。</p><p>随着国内版权意识或主动、或被动的提高，我迎来了 readfree 的告别。在以前 readfree 可以正常访问的时候，我就不止一次的想过这个问题：虽然我方便的找到了书籍，但是很这明显侵权了书籍的版权，这个网站真的可以这么正常的存活在中国的互联网上么？现实给予了答案。</p><p>但是无论如何，我从 readfree 获益良多，感谢网站管理员以前的辛苦付出。尊重知识产权是读书之人应有之意，我相信管理员顺应大势，做出了一个正确的选择。感谢 readfree 多年以来的陪伴，它实现了他最初的愿景，希望未来的某一天，会以一个更加合适的方式归来。</p><p>结尾附上 <a href="https://readfree.me/">readfree 告别辞</a>。</p><p><img src="https://a.adcdn.cn/images/goodbye-readfree.webp" alt="goodbye-readfree"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今晚打开 readfree 的网站，不再是熟悉的界面，而是一封告别辞。&lt;/p&gt;
&lt;p&gt;随着国内版权意识或主动、或被动的提高，我迎来了 readfree 的告别。在以前 readfree 可以正常访问的时候，我就不止一次的想过这个问题：虽然我方便的找到了书籍，但是很这明显侵权</summary>
      
    
    
    
    <category term="articles" scheme="https://ldsink.com/categories/articles/"/>
    
    
  </entry>
  
  <entry>
    <title>在 deepin 15.10+ 上安装 Python3</title>
    <link href="https://ldsink.com/articles/how-to-install-python-3-on-deepin-15/"/>
    <id>https://ldsink.com/articles/how-to-install-python-3-on-deepin-15/</id>
    <published>2019-06-25T09:05:25.000Z</published>
    <updated>2021-06-22T05:43:59.820Z</updated>
    
    <content type="html"><![CDATA[<p>最近整理博客，发现很大一部人都是新手教程性质的“<a href="https://en.wikipedia.org/wiki/How-to/">How to</a>”类，内容主要是记录怎么手把手解决事情。没什么难度，非常简单，都是查询官方文档或者Google搜索出的解决方案。考虑到国内很多人其实只会用百度，看CSDN来工作的现实，我这类“How to”类的小笔记是有意义和有价值的。比那些不知道经过多少手的“资料”，自己的一手小笔记更加准确。我是个喜欢整理的人，这类小笔记，以后打算做成一个系列，名称会以<code>how-to</code>开头，也都会带上<code>how-to</code>的标签。以前有一个<a href="https://ldsink.com/articles/how-to-change-the-bulb-scientifically/">换灯泡</a>作为“伪”第一篇，这个作为“真”第一篇。</p><p>最近重装了 deepin 系统，版本号重装前和重装后系统版本都是<code>15.10</code>,但是系统依赖却有了很大的不同。之前的版本是滚动升级上来的，基于 Debian 的测试源，deepin 自己的代号<code>panda</code>，发行版名称<code>deepin unstable</code>。重新安装之后，变成了 Debian 的稳定版，deepin 代号 <code>lion</code>，发行版名称<code>deepin stable</code>。<code>panda</code>下可以直接从源安装<code>Python3.6</code>，升级之后因为基于 Debian 稳定版，源里移除了。好在编译安装也不麻烦，下面就是正常的从源代码编译安装的步骤。</p><blockquote><p>下面的方法在 deepin 上测试通过，应该同样适用于 Debian、Ubuntu。</p></blockquote><h2 id="0x0-升级系统-amp-安装依赖"><a href="#0x0-升级系统-amp-安装依赖" class="headerlink" title="0x0 升级系统 &amp; 安装依赖"></a>0x0 升级系统 &amp; 安装依赖</h2><p>打算编译安装以前，首先升级系统，安装必要的依赖。这样可以避免之后安装 Python 时缺少第三方库的问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install -y make build-essential libssl-dev zlib1g-dev</span><br><span class="line">sudo apt install -y libbz2-dev libreadline-dev libsqlite3-dev liblzma-dev wget curl llvm</span><br><span class="line">sudo apt install -y libncurses5-dev libncursesw5-dev xz-utils tk-dev</span><br></pre></td></tr></table></figure><h2 id="0x1-下载-Python-包并编译安装"><a href="#0x1-下载-Python-包并编译安装" class="headerlink" title="0x1 下载 Python 包并编译安装"></a>0x1 下载 Python 包并编译安装</h2><p>这次计划安装 Python 3.6.8，相关页面：<a href="https://www.python.org/downloads/release/python-368/">https://www.python.org/downloads/release/python-368/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.6.8/Python-3.6.8.tgz</span><br></pre></td></tr></table></figure><p>从压缩包解压源代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvf Python-3.6.8.tgz</span><br></pre></td></tr></table></figure><p>进入目录，执行 <code>./configure</code> 配置构建文件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd Python-3.6.8</span><br><span class="line">./configure --enable-optimizations</span><br></pre></td></tr></table></figure><p>编译并安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j8 &amp;&amp; sudo make altinstall</span><br></pre></td></tr></table></figure><h2 id="0x2-收尾工作"><a href="#0x2-收尾工作" class="headerlink" title="0x2 收尾工作"></a>0x2 收尾工作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make clean</span><br></pre></td></tr></table></figure><p>至此 Python3.6 已经安装完成，可以在命令行执行<code>python3.6</code>查看效果，<code>pipenv</code>创建当前版本的环境也会自动调用。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.rosehosting.com/blog/how-to-install-python-3-6-4-on-debian-9/">How to Install Python 3.6.4 on Debian 9</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近整理博客，发现很大一部人都是新手教程性质的“&lt;a href=&quot;https://en.wikipedia.org/wiki/How-to/&quot;&gt;How to&lt;/a&gt;”类，内容主要是记录怎么手把手解决事情。没什么难度，非常简单，都是查询官方文档或者Google搜索出的解决方案</summary>
      
    
    
    
    <category term="articles" scheme="https://ldsink.com/categories/articles/"/>
    
    
    <category term="how-to" scheme="https://ldsink.com/tags/how-to/"/>
    
  </entry>
  
  <entry>
    <title>P1005 超长数字串</title>
    <link href="https://ldsink.com/articles/p1005/"/>
    <id>https://ldsink.com/articles/p1005/</id>
    <published>2019-05-21T08:08:52.000Z</published>
    <updated>2021-06-22T05:43:59.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>题目地址：<a href="https://vijos.org/p/1005">Vijos P1005 超长数字串</a></p><h3 id="想法一"><a href="#想法一" class="headerlink" title="想法一"></a>想法一</h3><p>最直接的做法，是维护一个字符串，枚举这个无限长的S字符串。然后直接在S中寻找第一次出现位置。空间是有限的，所以我们不可能无限制枚举。可以根据内存限制和测试点范围，估计一个大概的长度，然后填满这个有限长度的S。依照这个想法快速写出代码，可以：</p><ul><li>能提交一个部分AC的程序，捞到保底分</li><li>方便构造复杂一点的测试用例</li></ul><h3 id="想法二"><a href="#想法二" class="headerlink" title="想法二"></a>想法二</h3><p>上面这样当然没法得到全部的正确答案。这个题目很明显，A的长度不超过200，这个长度为 200 的数，假设为 N，一定会出现在 S 中。知道某个 N，我们是可以根据规律直接计算出他出现的位置。所以这个问题就转化成求最小的 N，最小的 N 是可以通过枚举 N 的位数来直接尝试出的。</p><p>按照这个思路，可以得到求解方式为：</p><ol><li>从 1 到 len(A) 枚举 N 的长度 L</li><li>对于每个长度 L，在 A 中从后往前构造长度为 L 的数 M，检测 M 构造的数是否满足 A</li><li>对于每个长度 L，不停的用 M 更新 N，求出最小的 N 值，记录 N 值在字符串 A 的偏移量</li><li>根据 N 和偏移量计算位置</li><li>S 从 1 开始编号，所以需要位置 +1 得到答案</li></ol><p>不考虑数据大小，这个方式是正确的思路，稍微注意边界条件，可以得到正确的结果。边界条件包括：</p><ul><li>字符串 A 全为 0，直接在前面补 1 得到 N，然后使用偏移量 -1 进行计算</li><li>每一个构造的 M 不能以 0 开头，如果是，直接跳过</li><li>在 A 中构造 L 长度的数值 M。如果 M 的位数不够，需要从前面的内容填充</li><li>如果前面 <strong>(L - 缺失位数)的内容全为 9，M 需要填充(L - 缺失位数)的 0</strong></li><li>否则填充 <strong>(L - 缺失位数)</strong> 长度的 <strong>A中当前枚举位置前(L - 缺失位数)的值加 1</strong></li></ul><p>用一个例子来验证思路，假如输入数据是 <code>0000</code>。</p><ol><li>直接补 1，得到最小的 N 为 10000。</li><li><code>10000</code>是5位数，L=5。计算1-4位的值，再加上第5位的值，减去 N 在 A 的偏移量 -1，就是位置。</li><li>位置 +1 得到答案</li></ol><p>每个长度为 L 的数在 S 中消耗的位数为 <code>L * 9 * 10^(L-1)</code>，可以得出</p><table><thead><tr><th>位数</th><th>计算方式</th><th>占的长度</th></tr></thead><tbody><tr><td>1</td><td>1 * 9 * 10^(1-1)</td><td>9</td></tr><tr><td>2</td><td>2 * 9 * 10^(2-1)</td><td>180</td></tr><tr><td>3</td><td>3 * 9 * 10^(3-1)</td><td>2700</td></tr><tr><td>4</td><td>4 * 9 * 10^(4-1)</td><td>36000</td></tr></tbody></table><p>第五位的偏移量为 5*(10000-10000)=0，位置为 9+180+2700+36000+0-(-1)=38890，+1 得到答案 38891。</p><h3 id="想法三"><a href="#想法三" class="headerlink" title="想法三"></a>想法三</h3><p>按照思路二，写成了新的代码。但是还不能通过全部的点。A 长度最多为 200，这个范围肯定是超过最大的整型了，需要高精度。</p><p>如果是以前竞赛的时候，时间不够了，估计用 Int64 整完想法二的代码，差不多这个题就这么提交了。但是，现在，是为了学习 Go 来做题的，Go 有处理大数据的 <a href="https://golang.org/pkg/math/big/">math/big</a>！</p><p>将想法二的代码，涉及到计算的地方都使用现成的<code>big.Int</code>相关的方法替换，出来的结果就是能支持 200 位 N 的结果计算的正确代码。</p><h3 id="几个测试点"><a href="#几个测试点" class="headerlink" title="几个测试点"></a>几个测试点</h3><table><thead><tr><th>A</th><th>结果</th></tr></thead><tbody><tr><td>21</td><td>15</td></tr><tr><td>00</td><td>191</td></tr><tr><td>99999</td><td>438886</td></tr><tr><td>9999999999</td><td>88888888881</td></tr><tr><td>0000000000</td><td>98888888891</td></tr></tbody></table><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ZHOU Cheng &lt;c.zhou@live.com&gt;</span></span><br><span class="line"><span class="comment">2019-5-18 22:48:21</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math/big&quot;</span></span><br><span class="line">    <span class="string">&quot;regexp&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> zero = big.NewInt(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> one = big.NewInt(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> ten = big.NewInt(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getBigInt</span><span class="params">(s <span class="keyword">string</span>)</span> *<span class="title">big</span>.<span class="title">Int</span></span> &#123;</span><br><span class="line">    i, _ := <span class="built_in">new</span>(big.Int).SetString(s, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取填充 0 的长度为 n 的数值字符串</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getZeroString</span><span class="params">(value *big.Int, n <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    s := value.String()</span><br><span class="line">    <span class="keyword">for</span> n = n - <span class="built_in">len</span>(s); n &gt; <span class="number">0</span>; n-- &#123;</span><br><span class="line">        s = <span class="string">&quot;0&quot;</span> + s</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 长度为 bit，在 a 中偏移量为 offset 的 num 是否符合条件。不符合返回 zero</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">validateBitAndOffset</span><span class="params">(bit, offset <span class="keyword">int</span>, a <span class="keyword">string</span>)</span> *<span class="title">big</span>.<span class="title">Int</span></span> &#123;</span><br><span class="line">    <span class="comment">// 零开头的，不符合要求，直接返回 zero</span></span><br><span class="line">    <span class="keyword">if</span> strings.HasPrefix(a[offset:], <span class="string">&quot;0&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> zero</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当目前的长度少于期望的长度，使用前面的值来填充</span></span><br><span class="line">    <span class="keyword">if</span> offset+bit &gt; <span class="built_in">len</span>(a) &#123;</span><br><span class="line">        missBit := offset + bit - <span class="built_in">len</span>(a)</span><br><span class="line">        prevStr := a[offset-missBit : offset]</span><br><span class="line">        p := <span class="built_in">new</span>(big.Int)</span><br><span class="line">        <span class="comment">// 全 9 特殊处理，填充 0</span></span><br><span class="line">        <span class="keyword">if</span> match, _ := regexp.MatchString(<span class="string">&quot;^9*$&quot;</span>, prevStr); match &#123;</span><br><span class="line">            p.SetInt64(<span class="number">0</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p.SetString(prevStr, <span class="number">10</span>)</span><br><span class="line">            p.Add(p, one)</span><br><span class="line">        &#125;</span><br><span class="line">        a += getZeroString(p, missBit)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    num := getBigInt(a[offset : offset+bit])</span><br><span class="line">    n := <span class="built_in">new</span>(big.Int)</span><br><span class="line">    <span class="keyword">var</span> left, right <span class="keyword">int</span></span><br><span class="line">    <span class="comment">// 检测左边是否满足条件</span></span><br><span class="line">    n.Sub(num, one)</span><br><span class="line">    right = offset</span><br><span class="line">    <span class="keyword">for</span> right &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n.Cmp(one) &lt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> zero</span><br><span class="line">        &#125;</span><br><span class="line">        nStr := n.String()</span><br><span class="line">        left = max(<span class="number">0</span>, right-<span class="built_in">len</span>(nStr))</span><br><span class="line">        <span class="keyword">if</span> a[left:right] != nStr[<span class="built_in">len</span>(nStr)-(right-left):] &#123;</span><br><span class="line">            <span class="keyword">return</span> zero</span><br><span class="line">        &#125;</span><br><span class="line">        right -= <span class="built_in">len</span>(nStr)</span><br><span class="line">        n.Sub(n, one)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检测右边是否满足条件</span></span><br><span class="line">    n.Add(num, one)</span><br><span class="line">    left = offset + bit</span><br><span class="line">    length := <span class="built_in">len</span>(a)</span><br><span class="line">    <span class="keyword">for</span> left &lt; length &#123;</span><br><span class="line">        nStr := n.String()</span><br><span class="line">        right = min(length, left+<span class="built_in">len</span>(nStr))</span><br><span class="line">        <span class="keyword">if</span> a[left:right] != nStr[<span class="number">0</span>:right-left] &#123;</span><br><span class="line">            <span class="keyword">return</span> zero</span><br><span class="line">        &#125;</span><br><span class="line">        left += <span class="built_in">len</span>(nStr)</span><br><span class="line">        n.Add(n, one)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算数字出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNumberPosition</span><span class="params">(num *big.Int, offset <span class="keyword">int</span>)</span> *<span class="title">big</span>.<span class="title">Int</span></span> &#123;</span><br><span class="line">    result := big.NewInt(<span class="number">0</span> - <span class="keyword">int64</span>(offset))</span><br><span class="line">    <span class="keyword">if</span> num.Cmp(ten) &lt; <span class="number">0</span> &#123;</span><br><span class="line">        result.Add(result, num)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    length := <span class="built_in">len</span>(num.String())</span><br><span class="line">    start := big.NewInt(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; length; i++ &#123;</span><br><span class="line">        count := big.NewInt(<span class="number">9</span>)</span><br><span class="line">        count.Mul(count, start)</span><br><span class="line">        count.Mul(count, big.NewInt(<span class="keyword">int64</span>(i)))</span><br><span class="line">        result.Add(result, count)</span><br><span class="line">        start.Mul(start, ten)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    start.Sub(num, start)</span><br><span class="line">    curr := big.NewInt(<span class="keyword">int64</span>(length))</span><br><span class="line">    curr.Mul(curr, start)</span><br><span class="line">    curr.Add(curr, big.NewInt(<span class="number">1</span>))</span><br><span class="line">    result.Add(result, curr)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line">    _, _ = fmt.Scanf(<span class="string">&quot;%s&quot;</span>, &amp;a)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全 0 特殊处理</span></span><br><span class="line">    <span class="keyword">if</span> match, _ := regexp.MatchString(<span class="string">&quot;^0*$&quot;</span>, a); match &#123;</span><br><span class="line">        num := getBigInt(<span class="string">&quot;1&quot;</span> + a)</span><br><span class="line">        fmt.Println(getNumberPosition(num, <span class="number">-1</span>))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    best := big.NewInt(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i, j := <span class="number">1</span>, <span class="built_in">len</span>(a); i &lt;= j; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> offset := i - <span class="number">1</span>; offset &gt;= <span class="number">0</span>; offset-- &#123;</span><br><span class="line">            num := validateBitAndOffset(i, offset, a)</span><br><span class="line">            <span class="keyword">if</span> num.Cmp(zero) &gt; <span class="number">0</span> &#123;</span><br><span class="line">                curr := getNumberPosition(num, offset)</span><br><span class="line">                <span class="keyword">if</span> best.Cmp(zero) == <span class="number">0</span> || best.Cmp(curr) &gt; <span class="number">0</span> &#123;</span><br><span class="line">                    best = curr</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当前位数寻找到最优结果，打印并结束循环</span></span><br><span class="line">        <span class="keyword">if</span> best.Cmp(zero) &gt; <span class="number">0</span> &#123;</span><br><span class="line">            fmt.Println(best.String())</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;题目地址：&lt;a href=&quot;https://vijos.org/p/1005&quot;&gt;Vijos P1005 超长数字串&lt;/a&gt;&lt;/p&gt;
&lt;h3 </summary>
      
    
    
    
    <category term="articles" scheme="https://ldsink.com/categories/articles/"/>
    
    
    <category term="vijos" scheme="https://ldsink.com/tags/vijos/"/>
    
    <category term="go" scheme="https://ldsink.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>P1003 等价表达式</title>
    <link href="https://ldsink.com/articles/p1003-equal/"/>
    <id>https://ldsink.com/articles/p1003-equal/</id>
    <published>2019-05-12T06:37:52.000Z</published>
    <updated>2021-06-22T05:43:59.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>懒癌患者学习Go语言，断断续续都看了几遍，可惜工作中一直没机会用上。偶然看到<a href="https://vijos.org/">vijos</a>，现在已经支持Go语言。So，做题使我快乐！做题使我RP++</p><p>现在是为了学习Go来做题，和十年前信息竞赛刷<a href="https://vijos.org/">vijos</a>是完全不同的心态。当时是为了短时间内尽可能多拿分，搞不定正确的算法，也起码得按照输入数据规模把简单的三四十分拿到手。借着那本人手必读的骗分导论，暴力打表之道也偶尔发生。光阴似箭，日月如梭。扯回来，咱们来做这道题<a href="https://vijos.org/p/1003">P1003 等价表达式</a>。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>一个字符串处理问题。按照做题的思路，应该是读取进来一个表达式，再将<code>a</code>带入求值。若两个表达式<code>a</code>带入同一个值得到的结果相同，则认为表达式一致。可以使用多组数据，避免偶然发生的不同表达式计算结果一样的情况。整理出来，步骤如下：</p><ol><li>读取输入数据</li><li>实现一个函数，接收一个表达式和一个变量值，返回计算结果</li><li>定义一组测试用例</li><li>将每个选项，使用测试用例进行测试，通过则认为一致，输出选项</li></ol><p>逻辑想明白，接下来就是编码实现。出于学习Go的目的，为了熟悉相关函数和语法，有些地方不一定用最简单的方式实现逻辑。</p><h3 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h3><p>尝试了<code>fmt</code>，<code>bufio.NewReader</code>和<code>bufio.NewScanner</code>，因为输入数据有空格，<code>fmt</code>会把空格作为终止符，单行读取不完整。<code>bufio.NewReader</code>一次性读取了全部的。<code>bufio.NewScanner</code>比较像熟悉的<code>readline</code>。</p><h3 id="表达式过滤"><a href="#表达式过滤" class="headerlink" title="表达式过滤"></a>表达式过滤</h3><p>表达式头部尾部中间会有多余的空格，最简单的是字符串替换，过滤掉全部的空格。我用了另一种方式，使用正则表达式，留下符合要求的符号、数字和字母。多用用Go的正则表达式。多习惯一下基本数据结构<code>string</code>、<code>rune</code>、<code>byte</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">filterExpression</span><span class="params">(expression <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="comment">// 只允许 a 数字 + - * ^ ( )</span></span><br><span class="line">    reg, _ := regexp.Compile(<span class="string">&quot;[a\\d\\+\\-\\*\\^\\(\\)]+&quot;</span>)</span><br><span class="line">    mapping := <span class="function"><span class="keyword">func</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">rune</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> reg.MatchString(<span class="keyword">string</span>(r)) &#123;</span><br><span class="line">            <span class="keyword">return</span> r</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strings.Map(mapping, expression)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表达式计算"><a href="#表达式计算" class="headerlink" title="表达式计算"></a>表达式计算</h3><p>构造并维护一个数字栈和一个操作符栈，从左至右处理表达式。遇见数字压栈；遇见<code>a</code>替换成数字压栈；遇见操作符，和栈顶操作符比较，优先级高压栈，否则弹出栈顶操作符和两个数字进行计算。</p><p>操作符优先级 <code>(</code>&gt;<code>^</code>&gt;<code>*</code>&gt;<code>+</code>=<code>-</code>&gt;<code>)</code>，我用一个 <a href="https://tour.golang.org/moretypes/19/">Maps</a> 维护，代码如下：</p><h4 id="操作符优先级"><a href="#操作符优先级" class="headerlink" title="操作符优先级"></a>操作符优先级</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">operatorOrder[<span class="string">&quot;+&quot;</span>] = <span class="number">1</span></span><br><span class="line">operatorOrder[<span class="string">&quot;-&quot;</span>] = <span class="number">1</span></span><br><span class="line">operatorOrder[<span class="string">&quot;*&quot;</span>] = <span class="number">2</span></span><br><span class="line">operatorOrder[<span class="string">&quot;^&quot;</span>] = <span class="number">3</span></span><br><span class="line">operatorOrder[<span class="string">&quot;(&quot;</span>] = <span class="number">4</span></span><br><span class="line">operatorOrder[<span class="string">&quot;)&quot;</span>] = <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="乘法和幂"><a href="#乘法和幂" class="headerlink" title="乘法和幂"></a>乘法和幂</h4><p>因为有幂的存在，数值可能会变得很大。好在我们并不需要计算表达式的精确值，所以可以对所有涉及<code>*</code>和<code>^</code>的计算取一个大质数的模，这样可以有效避免数值过大越界。幂计算多用位运算加速。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prime = <span class="number">16769023</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">powerMod</span><span class="params">(x, y <span class="keyword">int64</span>)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">int64</span> = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j := x; y &gt; <span class="number">0</span>; j = j * j % prime &#123;</span><br><span class="line">        <span class="keyword">if</span> y&amp;<span class="number">1</span> == <span class="number">1</span> &#123;</span><br><span class="line">            i = i * j % prime</span><br><span class="line">        &#125;</span><br><span class="line">        y = y &gt;&gt; <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">multiMod</span><span class="params">(x, y <span class="keyword">int64</span>)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * y % prime</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="括号处理"><a href="#括号处理" class="headerlink" title="括号处理"></a>括号处理</h4><p>操作符栈只有两个括号的时候，应该弹出。测试数据应该有脏数据，有些括号不是成对的。不能直接的弹出两个了事，得做一下判断，是我们需要弹出的括号则弹出，否则不做处理。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>下面是AC代码，还有改进的点：</p><ul><li>表达式过滤掉空格之后，可以在全部的操作符和<code>a</code>前后增加空格，然后按照空格做 split，过滤掉空元素，直接将字符串换成一个操作符、数字和<code>a</code>的 List，会比现在这样一次一次拿更优雅。</li><li>有些可以用 <code>rune</code> 的地方，还是用的 <code>string</code>，对这些转换很明确的话，可以更精确点。</li><li>质数随便找了一个，可以按照数据规模找一个更合适的。</li></ul><blockquote><p>全程脑袋都在想，用 Python 的，替换完字符，稍微做点处理，大概就能 eval 直接计算了吧……</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ZHOU Cheng &lt;c.zhou@live.com&gt;</span></span><br><span class="line"><span class="comment">2019-5-11 16:12:46</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;regexp&quot;</span></span><br><span class="line">    <span class="string">&quot;strconv&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> operatorOrder = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Number = <span class="string">&quot;1234567890&quot;</span></span><br><span class="line"><span class="keyword">const</span> Mark = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">filterExpression</span><span class="params">(expression <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="comment">// 只允许 a 数字 + - * ^ ( )</span></span><br><span class="line">    reg, _ := regexp.Compile(<span class="string">&quot;[a\\d\\+\\-\\*\\^\\(\\)]+&quot;</span>)</span><br><span class="line">    mapping := <span class="function"><span class="keyword">func</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">rune</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> reg.MatchString(<span class="keyword">string</span>(r)) &#123;</span><br><span class="line">            <span class="keyword">return</span> r</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strings.Map(mapping, expression)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNumOrOperator</span><span class="params">(expression <span class="keyword">string</span>, offset <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    c := expression[offset : offset+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> c == <span class="string">&quot;a&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> c, offset + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> _, ok := operatorOrder[c]; ok &#123;</span><br><span class="line">        <span class="keyword">return</span> c, offset + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    length := <span class="built_in">len</span>(expression)</span><br><span class="line">    number := <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> ; offset &lt; length; offset++ &#123;</span><br><span class="line">        c := expression[offset : offset+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> !strings.Contains(Number, c) &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        number += c</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> number, offset</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> prime = <span class="number">16769023</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">powerMod</span><span class="params">(x, y <span class="keyword">int64</span>)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">int64</span> = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j := x; y &gt; <span class="number">0</span>; j = j * j % prime &#123;</span><br><span class="line">        <span class="keyword">if</span> y&amp;<span class="number">1</span> == <span class="number">1</span> &#123;</span><br><span class="line">            i = i * j % prime</span><br><span class="line">        &#125;</span><br><span class="line">        y = y &gt;&gt; <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">multiMod</span><span class="params">(x, y <span class="keyword">int64</span>)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * y % prime</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculateValue</span><span class="params">(val1, val2 <span class="keyword">int64</span>, op <span class="keyword">string</span>)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> op &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> val1 + val2</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> val1 - val2</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> multiMod(val1, val2)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;^&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> powerMod(val1, val2)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculateExpression</span><span class="params">(expression <span class="keyword">string</span>, value <span class="keyword">int64</span>)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line">    numStack := [<span class="number">50</span>]<span class="keyword">int64</span>&#123;&#125;</span><br><span class="line">    numStackTop := <span class="number">0</span></span><br><span class="line">    opStack := [<span class="number">50</span>]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">    opStackTop := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    curStr := <span class="string">&quot;&quot;</span></span><br><span class="line">    offset := <span class="number">0</span></span><br><span class="line">    length := <span class="built_in">len</span>(expression)</span><br><span class="line">    <span class="keyword">for</span> ; offset &lt; length; &#123;</span><br><span class="line">        curStr, offset = getNumOrOperator(expression, offset)</span><br><span class="line">        <span class="keyword">if</span> curStr == <span class="string">&quot;a&quot;</span> &#123;</span><br><span class="line">            numStackTop++</span><br><span class="line">            numStack[numStackTop] = value</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> _, ok := operatorOrder[curStr]; ok &#123;</span><br><span class="line">            curOrder, _ := operatorOrder[curStr]</span><br><span class="line">            <span class="keyword">for</span> opStackTop &gt; <span class="number">0</span> &#123;</span><br><span class="line">                topOrder, _ := operatorOrder[opStack[opStackTop]]</span><br><span class="line">                <span class="comment">// 如果优先级小于前面操作符，计算上一个值</span></span><br><span class="line">                <span class="keyword">if</span> curOrder &lt;= topOrder &amp;&amp; opStack[opStackTop] != <span class="string">&quot;(&quot;</span> &#123;</span><br><span class="line">                    num1, num2 := numStack[numStackTop<span class="number">-1</span>], numStack[numStackTop]</span><br><span class="line">                    numStackTop -= <span class="number">2</span></span><br><span class="line">                    topOp := opStack[opStackTop]</span><br><span class="line">                    opStackTop--</span><br><span class="line"></span><br><span class="line">                    numStackTop++</span><br><span class="line">                    numStack[numStackTop] = calculateValue(num1, num2, topOp)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            opStackTop++</span><br><span class="line">            opStack[opStackTop] = curStr</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检测结尾如果是 )，弹出两个括号。</span></span><br><span class="line">            <span class="keyword">if</span> opStack[opStackTop] == <span class="string">&quot;)&quot;</span> &#123;</span><br><span class="line">                opStackTop--</span><br><span class="line">                <span class="comment">// 详细判断，兼容一个错误的测试用例</span></span><br><span class="line">                <span class="keyword">if</span> opStackTop &gt; <span class="number">0</span> &amp;&amp; opStack[opStackTop] == <span class="string">&quot;(&quot;</span> &#123;</span><br><span class="line">                    opStackTop--</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后处理数字</span></span><br><span class="line">        num, _ := strconv.ParseInt(curStr, <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line">        numStackTop++</span><br><span class="line">        numStack[numStackTop] = num</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 还需要计算一次</span></span><br><span class="line">    <span class="keyword">for</span> ; opStackTop &gt; <span class="number">0</span>; &#123;</span><br><span class="line">        num1, num2 := numStack[numStackTop<span class="number">-1</span>], numStack[numStackTop]</span><br><span class="line">        numStackTop -= <span class="number">2</span></span><br><span class="line">        op := opStack[opStackTop]</span><br><span class="line">        opStackTop--</span><br><span class="line"></span><br><span class="line">        numStackTop++</span><br><span class="line">        numStack[numStackTop] = calculateValue(num1, num2, op)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numStack[numStackTop]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    scanner := bufio.NewScanner(os.Stdin)</span><br><span class="line"></span><br><span class="line">    scanner.Scan()</span><br><span class="line">    baseExpression := scanner.Text()</span><br><span class="line">    baseExpression = filterExpression(baseExpression)</span><br><span class="line"></span><br><span class="line">    scanner.Scan()</span><br><span class="line">    nStr := scanner.Text()</span><br><span class="line">    n, _ := strconv.Atoi(nStr)</span><br><span class="line"></span><br><span class="line">    operatorOrder[<span class="string">&quot;+&quot;</span>] = <span class="number">1</span></span><br><span class="line">    operatorOrder[<span class="string">&quot;-&quot;</span>] = <span class="number">1</span></span><br><span class="line">    operatorOrder[<span class="string">&quot;*&quot;</span>] = <span class="number">2</span></span><br><span class="line">    operatorOrder[<span class="string">&quot;^&quot;</span>] = <span class="number">3</span></span><br><span class="line">    operatorOrder[<span class="string">&quot;(&quot;</span>] = <span class="number">4</span></span><br><span class="line">    operatorOrder[<span class="string">&quot;)&quot;</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> caseNum = <span class="number">3</span></span><br><span class="line">    values := [caseNum]<span class="keyword">int64</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;</span><br><span class="line">    result := [caseNum]<span class="keyword">int64</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; caseNum; i++ &#123;</span><br><span class="line">        result[i] = calculateExpression(baseExpression, values[i])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> offset := <span class="number">0</span>; offset &lt; n; offset++ &#123;</span><br><span class="line">        scanner.Scan()</span><br><span class="line">        expression := scanner.Text()</span><br><span class="line">        expression = filterExpression(expression)</span><br><span class="line">        equal := <span class="literal">true</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; equal &amp;&amp; i &lt; caseNum; i++ &#123;</span><br><span class="line">            r := calculateExpression(expression, values[i])</span><br><span class="line">            <span class="keyword">if</span> r != result[i] &#123;</span><br><span class="line">                equal = <span class="literal">false</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> equal &#123;</span><br><span class="line">            fmt.Print(Mark[offset : offset+<span class="number">1</span>])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;懒癌患者学习Go语言，断断续续都看了几遍，可惜工作中一直没机会用上。偶然看到&lt;a href=&quot;https://vijos.org/&quot;&gt;vij</summary>
      
    
    
    
    <category term="articles" scheme="https://ldsink.com/categories/articles/"/>
    
    
    <category term="vijos" scheme="https://ldsink.com/tags/vijos/"/>
    
    <category term="go" scheme="https://ldsink.com/tags/go/"/>
    
  </entry>
  
</feed>
